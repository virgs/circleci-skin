{
    "all_commit_details": [
        {
            "author_date": "2024-03-04T20:47:44.000Z",
            "author_email": "gabriel.barroso@jackinthebox.com",
            "author_login": "g-barroso",
            "author_name": "Gabriel Barroso",
            "body": "",
            "branch": "main",
            "commit": "4e66492911973f021c93e88c02aea0431c2bee49",
            "commit_url": "https://github.com/Jackinthebox-IT/pos-reporting-event-processor/commit/4e66492911973f021c93e88c02aea0431c2bee49",
            "committer_date": "2024-03-04T20:47:44.000Z",
            "committer_email": "gabriel.barroso@jackinthebox.com",
            "committer_login": "g-barroso",
            "committer_name": "Gabriel Barroso",
            "subject": "Updating buildCardInfo"
        },
        {
            "author_date": "2024-03-05T14:12:52.000Z",
            "author_email": "gabriel.barroso@jackinthebox.com",
            "author_login": "g-barroso",
            "author_name": "Gabriel Barroso",
            "body": "",
            "branch": "main",
            "commit": "69a5c3c799e7ea1dd50316e66c54bf862289c5ef",
            "commit_url": "https://github.com/Jackinthebox-IT/pos-reporting-event-processor/commit/69a5c3c799e7ea1dd50316e66c54bf862289c5ef",
            "committer_date": "2024-03-05T14:12:52.000Z",
            "committer_email": "gabriel.barroso@jackinthebox.com",
            "committer_login": "g-barroso",
            "committer_name": "Gabriel Barroso",
            "subject": "Updating migration to limit field size"
        },
        {
            "author_date": "2024-03-05T21:33:59.000Z",
            "author_email": "134400219+g-barroso@users.noreply.github.com",
            "author_login": "g-barroso",
            "author_name": "Gabriel Barroso",
            "body": "[SPF2-1330]: expose credit card information in Payments portion of the API",
            "branch": "main",
            "commit": "42cad44c9222813a0eb42367d4663d001316b77e",
            "commit_url": "https://github.com/Jackinthebox-IT/pos-reporting-event-processor/commit/42cad44c9222813a0eb42367d4663d001316b77e",
            "committer_date": "2024-03-05T21:33:59.000Z",
            "committer_email": "noreply@github.com",
            "committer_login": "web-flow",
            "committer_name": "GitHub",
            "subject": "Merge pull request #9 from Jackinthebox-IT/SPF2-1330"
        }
    ],
    "all_commit_details_truncated": false,
    "author_date": null,
    "author_email": null,
    "author_name": null,
    "body": "[SPF2-1330]: expose credit card information in Payments portion of the API",
    "branch": "main",
    "build_num": 250,
    "build_parameters": {},
    "build_time_millis": 37025,
    "build_url": "https://circleci.com/gh/Jackinthebox-IT/pos-reporting-event-processor/250",
    "canceled": false,
    "canceler": null,
    "circle_yml": {
        "string": "# Orb 'circleci/aws-cli@3.1.5' resolved to 'circleci/aws-cli@3.1.5'\n# Orb 'circleci/aws-ecr@8.2.1' resolved to 'circleci/aws-ecr@8.2.1'\n# Orb 'circleci/aws-ecs@3.2.0' resolved to 'circleci/aws-ecs@3.2.0'\nversion: 2\njobs:\n  Build Test:\n    docker:\n    - image: amazoncorretto:17-alpine3.17-jdk\n    resource_class: large\n    steps:\n    - attach_workspace:\n        at: .\n    - run:\n        command: |\n          ./gradlew build -x test -Dquarkus.profile=qa\n        name: Build\n    - persist_to_workspace:\n        paths:\n        - .\n        root: .\n  Make Live Test:\n    docker:\n    - image: cimg/base:stable\n    resource_class: large\n    steps:\n    - run:\n        command: |\n          if cat /etc/issue | grep \"Alpine\" \u003e/dev/null 2\u003e\u00261; then\n              if [ \"$ID\" = 0 ]; then export SUDO=\"\"; else export SUDO=\"sudo\"; fi\n          else\n              if [[ $EUID == 0 ]]; then export SUDO=\"\"; else export SUDO=\"sudo\"; fi\n          fi\n\n          Install_AWS_CLI() {\n              echo \"Installing AWS CLI v2\"\n              cd /tmp || exit\n              # Platform check\n              if uname -a | grep \"Darwin\"; then\n                  export SYS_ENV_PLATFORM=macos\n              elif uname -a | grep \"x86_64 GNU/Linux\"; then\n                  export SYS_ENV_PLATFORM=linux_x86\n              elif uname -a | grep \"aarch64 GNU/Linux\"; then\n                  export SYS_ENV_PLATFORM=linux_arm\n              elif uname -a | grep \"x86_64 Msys\"; then\n                  export SYS_ENV_PLATFORM=windows\n              elif cat /etc/issue | grep \"Alpine\" \u003e/dev/null 2\u003e\u00261; then\n                  export SYS_ENV_PLATFORM=linux_alpine\n              else\n                  echo \"This platform appears to be unsupported.\"\n                  uname -a\n                  exit 1\n              fi\n\n              # Install per platform\n              case $SYS_ENV_PLATFORM in\n              linux_x86)\n                  curl -sSL \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip\" -o \"awscliv2.zip\"\n                  unzip -q -o awscliv2.zip\n                  $SUDO ./aws/install -i \"${PARAM_AWS_CLI_INSTALL_DIR}\" -b \"${PARAM_AWS_CLI_BINARY_DIR}\"\n                  rm -r awscliv2.zip ./aws\n                  ;;\n              windows)\n                  if [ ! \"$(command -v choco)\" ]; then\n                      echo \"Chocolatey is required to uninstall AWS\"\n                      exit 1\n                  fi\n                  choco install awscli --version=\"$1\"\n                  echo \"$1\"\n                  if echo \"$1\" | grep \"2.\"; then\n                      echo 'export PATH=\"${PATH}:/c/Program Files/Amazon/AWSCLIV2\"' \u003e\u003e\"$BASH_ENV\"\n                  else\n                      echo 'export PATH=\"${PATH}:/c/Program Files/Amazon/AWSCLI/bin\"' \u003e\u003e\"$BASH_ENV\"\n                  fi\n                  ;;\n              macos)\n                  curl -sSL \"https://awscli.amazonaws.com/AWSCLIV2$1.pkg\" -o \"AWSCLIV2.pkg\"\n                  $SUDO installer -pkg AWSCLIV2.pkg -target /\n                  rm AWSCLIV2.pkg\n                  ;;\n              linux_arm)\n                  curl -sSL \"https://awscli.amazonaws.com/awscli-exe-linux-aarch64$1.zip\" -o \"awscliv2.zip\"\n                  unzip -q -o awscliv2.zip\n                  $SUDO ./aws/install -i \"${PARAM_AWS_CLI_INSTALL_DIR}\" -b \"${PARAM_AWS_CLI_BINARY_DIR}\"\n                  rm -r awscliv2.zip ./aws\n                  ;;\n              linux_alpine)\n                  apk --no-cache add \\\n                      binutils \\\n                      curl\n\n                  curl -L https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub -o /etc/apk/keys/sgerrand.rsa.pub\n                  curl -LO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-2.34-r0.apk\n                  curl -LO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-bin-2.34-r0.apk\n                  curl -LO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-i18n-2.34-r0.apk\n\n                  apk add --force-overwrite --no-cache \\\n                      glibc-2.34-r0.apk \\\n                      glibc-bin-2.34-r0.apk \\\n                      glibc-i18n-2.34-r0.apk\n\n                  /usr/glibc-compat/bin/localedef -i en_US -f UTF-8 en_US.UTF-8\n                  curl -sSL \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip\" -o \"awscliv2.zip\"\n\n                  echo \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip\"\n                  unzip awscliv2.zip\n                  aws/install\n                  rm -r awscliv2.zip ./aws\n                  ;;\n              *)\n                  echo \"This orb does not currently support your platform. If you believe it should, please consider opening an issue on the GitHub repository:\"\n                  echo \"https://github.com/CircleCI-Public/aws-cli-orb/issues/new\"\n                  exit 1\n                  ;;\n              esac\n              # Toggle AWS Pager\n              if [ \"$PARAM_AWS_CLI_DISABLE_PAGER\" = 1 ]; then\n                  if [ -z \"${AWS_PAGER+x}\" ]; then\n                      echo 'export AWS_PAGER=\"\"' \u003e\u003e\"$BASH_ENV\"\n                      echo \"AWS_PAGER is being set to the empty string to disable all output paging for AWS CLI commands.\"\n                      echo \"You can set the 'disable-aws-pager' parameter to 'false' to disable this behavior.\"\n                  fi\n              fi\n          }\n\n          Uninstall_AWS_CLI() {\n              if uname -a | grep \"x86_64 Msys\"; then\n                  if [ ! \"$(command -v choco)\" ]; then\n                      echo \"Chocolatey is required to uninstall AWS\"\n                      exit 1\n                  fi\n                  choco uninstall awscli\n              else\n                  AWS_CLI_PATH=$(command -v aws)\n                  echo \"$AWS_CLI_PATH\"\n                  if [ -n \"$AWS_CLI_PATH\" ]; then\n                      EXISTING_AWS_VERSION=$(aws --version)\n                      echo \"Uninstalling ${EXISTING_AWS_VERSION}\"\n                      # shellcheck disable=SC2012\n                      if [ -L \"$AWS_CLI_PATH\" ]; then\n                          AWS_SYMLINK_PATH=$(ls -l \"$AWS_CLI_PATH\" | sed -e 's/.* -\u003e //')\n                      fi\n                      if uname -a | grep \"x86_64 Msys\"; then export SUDO=\"\"; fi\n                      $SUDO rm -rf \"$AWS_CLI_PATH\" \"$AWS_SYMLINK_PATH\" \"$HOME/.aws/\" \"/usr/local/bin/aws\" \"/usr/local/bin/aws_completer\" \"/usr/local/aws-cli\"\n                  else\n                      echo \"No AWS install found\"\n                  fi\n              fi\n          }\n\n          if [ ! \"$(command -v aws)\" ]; then\n              if [ \"$PARAM_AWS_CLI_VERSION\" = \"latest\" ]; then\n                  Install_AWS_CLI\n              else\n                  if uname -a | grep \"x86_64 Msys\"; then\n                      Install_AWS_CLI \"${PARAM_AWS_CLI_VERSION}\"\n                  else\n                      Install_AWS_CLI \"-${PARAM_AWS_CLI_VERSION}\"\n                  fi\n              fi\n          elif [ \"$PARAM_AWS_CLI_OVERRIDE\" = 1 ]; then\n              Uninstall_AWS_CLI\n              if uname -a | grep \"x86_64 Msys\"; then\n                  Install_AWS_CLI \"${PARAM_AWS_CLI_VERSION}\"\n              else\n                  Install_AWS_CLI \"-${PARAM_AWS_CLI_VERSION}\"\n              fi\n          else\n              echo \"AWS CLI is already installed, skipping installation.\"\n              aws --version\n          fi\n        environment:\n          PARAM_AWS_CLI_BINARY_DIR: /usr/local/bin\n          PARAM_AWS_CLI_DISABLE_PAGER: true\n          PARAM_AWS_CLI_INSTALL_DIR: /usr/local/aws-cli\n          PARAM_AWS_CLI_OVERRIDE: false\n          PARAM_AWS_CLI_VERSION: latest\n        name: Install AWS CLI - latest\n    - run:\n        command: \"#!/bin/sh\\nif cat /etc/issue | grep \\\"Alpine\\\" \u003e/dev/null 2\u003e\u00261; then\\n    . $BASH_ENV\\nfi\\n\\nPARAM_AWS_CLI_ACCESS_KEY_ID=$(eval echo \\\"\\\\$$PARAM_AWS_CLI_ACCESS_KEY_ID\\\")\\nPARAM_AWS_CLI_SECRET_ACCESS_KEY=$(eval echo \\\"\\\\$$PARAM_AWS_CLI_SECRET_ACCESS_KEY\\\")\\nPARAM_AWS_CLI_REGION=$(eval echo \\\"\\\\$$PARAM_AWS_CLI_REGION\\\")\\n\\nif [ -z \\\"$PARAM_AWS_CLI_ACCESS_KEY_ID\\\" ] || [ -z \\\"${PARAM_AWS_CLI_SECRET_ACCESS_KEY}\\\" ]; then \\n    echo \\\"Cannot configure profile. AWS access key id and AWS secret access key must be provided.\\\"\\n    exit 1\\nfi\\n\\naws configure set aws_access_key_id \\\\\\n    \\\"$PARAM_AWS_CLI_ACCESS_KEY_ID\\\" \\\\\\n    --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\n\\naws configure set aws_secret_access_key \\\\\\n    \\\"$PARAM_AWS_CLI_SECRET_ACCESS_KEY\\\" \\\\\\n    --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\n\\nif [ -n \\\"${AWS_SESSION_TOKEN}\\\" ]; then\\n    aws configure set aws_session_token \\\\\\n        \\\"${AWS_SESSION_TOKEN}\\\" \\\\\\n        --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\nfi\\n\\nif [ \\\"$PARAM_AWS_CLI_CONFIG_DEFAULT_REGION\\\" = \\\"1\\\" ]; then\\n    aws configure set default.region \\\"$PARAM_AWS_CLI_REGION\\\" \\\\\\n        --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\nfi\\n\\nif [ \\\"$PARAM_AWS_CLI_CONFIG_PROFILE_REGION\\\" = \\\"1\\\" ]; then\\n    aws configure set region \\\"$PARAM_AWS_CLI_REGION\\\" \\\\\\n        --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\nfi\\n\"\n        environment:\n          PARAM_AWS_CLI_ACCESS_KEY_ID: AWS_ACCESS_KEY_ID\n          PARAM_AWS_CLI_CONFIG_DEFAULT_REGION: true\n          PARAM_AWS_CLI_CONFIG_PROFILE_REGION: true\n          PARAM_AWS_CLI_PROFILE_NAME: default\n          PARAM_AWS_CLI_REGION: AWS_REGION\n          PARAM_AWS_CLI_SECRET_ACCESS_KEY: AWS_SECRET_ACCESS_KEY\n        name: Configure AWS Access Key ID\n    - restore_cache:\n        keys:\n        - v1_python_install\n        name: Restoring cache Python command\n    - run:\n        command: |\n          if [[ ! -f \"/usr/bin/python\" ]]; then\n            echo \"Installing Python\"\n            sudo apt-get install python\n          else\n            echo \"Python is already installed.\"\n          fi\n        name: Install Python\n    - save_cache:\n        key: v1_python_install\n        name: Saving cache Python command\n        paths:\n        - /usr/bin/python\n    - run:\n        command: |\n          TASK_DEFINITION_ARN=$(aws ecs describe-task-definition \\\n            --task-definition store-data-hub-event-processor \\\n            --output text \\\n            --query 'taskDefinition.taskDefinitionArn' \\\n            --profile=)\n          echo \"export CCI_ORB_AWS_ECS_REGISTERED_TASK_DFN='${TASK_DEFINITION_ARN}'\" \u003e\u003e $BASH_ENV\n        name: Retrieve previous task definition\n    - run:\n        command: \"set -o noglob\\n\\n# These variables are evaluated so the config file may contain and pass in environment variables to the parameters.\\nECS_PARAM_FAMILY=$(eval echo \\\"$ECS_PARAM_FAMILY\\\")\\nECS_PARAM_CLUSTER_NAME=$(eval echo \\\"$ECS_PARAM_CLUSTER_NAME\\\")\\nECS_PARAM_SERVICE_NAME=$(eval echo \\\"$ECS_PARAM_SERVICE_NAME\\\")\\nECS_PARAM_PROFILE_NAME=$(eval echo \\\"$ECS_PARAM_PROFILE_NAME\\\")\\n\\nif [ -z \\\"${ECS_PARAM_SERVICE_NAME}\\\" ]; then\\n    ECS_PARAM_SERVICE_NAME=\\\"$ECS_PARAM_FAMILY\\\"\\nfi\\n\\nif [ \\\"$ECS_PARAM_FORCE_NEW_DEPLOY\\\" == \\\"1\\\" ]; then\\n    set -- \\\"$@\\\" --force-new-deployment\\nfi\\n\\nif [ -n \\\"${ECS_PARAM_PROFILE_NAME}\\\" ]; then\\n    set -- \\\"$@\\\" --profile \\\"${ECS_PARAM_PROFILE_NAME}\\\"   \\nfi\\n\\nif [ \\\"$ECS_PARAM_ENABLE_CIRCUIT_BREAKER\\\" == \\\"1\\\" ]; then\\n    set -- \\\"$@\\\" --deployment-configuration \\\"deploymentCircuitBreaker={enable=true,rollback=true}\\\"\\nfi\\n\\nDEPLOYED_REVISION=$(aws ecs update-service \\\\\\n    --cluster \\\"$ECS_PARAM_CLUSTER_NAME\\\" \\\\\\n    --service \\\"${ECS_PARAM_SERVICE_NAME}\\\" \\\\\\n    --task-definition \\\"${CCI_ORB_AWS_ECS_REGISTERED_TASK_DFN}\\\" \\\\\\n    --output text \\\\\\n    --query service.taskDefinition \\\\\\n    \\\"$@\\\")\\necho \\\"export CCI_ORB_AWS_ECS_DEPLOYED_REVISION='${DEPLOYED_REVISION}'\\\" \u003e\u003e \\\"$BASH_ENV\\\"\\n\"\n        environment:\n          ECS_PARAM_CLUSTER_NAME: store_data_hub_fargate_cluster\n          ECS_PARAM_ENABLE_CIRCUIT_BREAKER: false\n          ECS_PARAM_FAMILY: store-data-hub-event-processor\n          ECS_PARAM_FORCE_NEW_DEPLOY: true\n          ECS_PARAM_PROFILE_NAME: ''\n          ECS_PARAM_SERVICE_NAME: store-data-hub-event-processor-service\n        name: Update service with registered task definition\n    - run:\n        command: \"# These variables are evaluated so the config file may contain and pass in environment variables to the parameters.\\nECS_PARAM_FAMILY=$(eval echo \\\"$ECS_PARAM_FAMILY\\\")\\nECS_PARAM_SERVICE_NAME=$(eval echo \\\"$ECS_PARAM_SERVICE_NAME\\\")\\nECS_PARAM_CLUSTER_NAME=$(eval echo \\\"$ECS_PARAM_CLUSTER_NAME\\\")\\nECS_PARAM_TASK_DEF_ARN=$(eval echo \\\"$ECS_PARAM_TASK_DEF_ARN\\\")\\nECS_PARAM_PROFILE_NAME=$(eval echo \\\"$ECS_PARAM_PROFILE_NAME\\\")\\n\\nif [ \\\"$ECS_PARAM_TASK_DEF_ARN\\\" = \\\"\\\" ]; then\\n    echo \\\"Invalid task-definition-arn parameter value: $ECS_PARAM_TASK_DEF_ARN\\\"\\n    exit 1\\nfi\\n\\n\\nif [ -z \\\"${ECS_PARAM_SERVICE_NAME}\\\" ]; then\\n    ECS_PARAM_SERVICE_NAME=\\\"$ECS_PARAM_FAMILY\\\"\\nfi\\n\\necho \\\"Verifying that $ECS_PARAM_TASK_DEF_ARN is deployed..\\\"\\n\\nattempt=0\\n\\nwhile [ \\\"$attempt\\\" -lt \\\"$ECS_PARAM_MAX_POLL_ATTEMPTS\\\" ]\\n\\ndo  \\n    if [ -n \\\"${ECS_PARAM_PROFILE_NAME}\\\" ]; then\\n        set -- \\\"$@\\\" --profile=\\\"${ECS_PARAM_PROFILE_NAME}\\\"   \\n    fi\\n\\n    DEPLOYMENTS=$(aws ecs describe-services \\\\\\n        --cluster \\\"$ECS_PARAM_CLUSTER_NAME\\\" \\\\\\n        --services \\\"${ECS_PARAM_SERVICE_NAME}\\\" \\\\\\n        --output text \\\\\\n        --query 'services[0].deployments[].[taskDefinition, status]' \\\\\\n        \\\"$@\\\")\\n    NUM_DEPLOYMENTS=$(aws ecs describe-services \\\\\\n        --cluster \\\"$ECS_PARAM_CLUSTER_NAME\\\" \\\\\\n        --services \\\"${ECS_PARAM_SERVICE_NAME}\\\" \\\\\\n        --output text \\\\\\n        --query 'length(services[0].deployments)' \\\\\\n        \\\"$@\\\")\\n    TARGET_REVISION=$(aws ecs describe-services \\\\\\n        --cluster \\\"$ECS_PARAM_CLUSTER_NAME\\\" \\\\\\n        --services \\\"${ECS_PARAM_SERVICE_NAME}\\\" \\\\\\n        --output text \\\\\\n        --query \\\"services[0].deployments[?taskDefinition==\\\\`$ECS_PARAM_TASK_DEF_ARN\\\\` \u0026\u0026 runningCount == desiredCount \u0026\u0026 (status == \\\\`PRIMARY\\\\` || status == \\\\`ACTIVE\\\\`)][taskDefinition]\\\" \\\\\\n        \\\"$@\\\")\\n    echo \\\"Current deployments: $DEPLOYMENTS\\\"\\n    if [ \\\"$NUM_DEPLOYMENTS\\\" = \\\"1\\\" ] \u0026\u0026 [ \\\"$TARGET_REVISION\\\" = \\\"$ECS_PARAM_TASK_DEF_ARN\\\" ]; then\\n        echo \\\"The task definition revision $TARGET_REVISION is the only deployment for the service and has attained the desired running task count.\\\"\\n        exit 0\\n    else\\n        echo \\\"Waiting for revision $ECS_PARAM_TASK_DEF_ARN to reach desired running count / older revisions to be stopped..\\\"\\n        sleep \\\"$ECS_PARAM_POLL_INTERVAL\\\"\\n    fi\\n    attempt=$((attempt + 1))\\ndone\\n\\necho \\\"Stopped waiting for deployment to be stable - please check the status of $ECS_PARAM_TASK_DEF_ARN on the AWS ECS console.\\\"\\n\\nif [ \\\"$ECS_PARAM_FAIL_ON_VERIFY_TIMEOUT\\\" = \\\"1\\\" ]; then\\n    exit 1\\nfi\\n\\n\"\n        description: |\n          Poll the deployment status at intervals till the given task definition revision has reached its desired running task count and is the only one deployed for the service.\n        environment:\n          ECS_PARAM_CLUSTER_NAME: store_data_hub_fargate_cluster\n          ECS_PARAM_FAIL_ON_VERIFY_TIMEOUT: true\n          ECS_PARAM_FAMILY: store-data-hub-event-processor\n          ECS_PARAM_MAX_POLL_ATTEMPTS: 50\n          ECS_PARAM_POLL_INTERVAL: 20\n          ECS_PARAM_PROFILE_NAME: ''\n          ECS_PARAM_SERVICE_NAME: store-data-hub-event-processor-service\n          ECS_PARAM_TASK_DEF_ARN: $CCI_ORB_AWS_ECS_DEPLOYED_REVISION\n        name: Verify that the revision is deployed and older revisions are stopped\n  Build and Publish Prod:\n    docker:\n    - image: cimg/base:stable\n    resource_class: large\n    steps:\n    - attach_workspace:\n        at: .\n    - run:\n        command: |\n          echo 'export LATEST_TAG=\"${AWS_ECR_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/domain-services/store-data-hub-event-processor:latest\"' \u003e\u003e \"$BASH_ENV\"\n          echo 'export VERSION_TAG=\"${AWS_ECR_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/domain-services/store-data-hub-event-processor:${CIRCLE_SHA1:0:7}\"' \u003e\u003e \"$BASH_ENV\"\n          echo 'export DOCKERFILE_PATH=\"src/main/docker/Dockerfile.jvm\"' \u003e\u003e \"$BASH_ENV\"\n          echo 'export IMAGE_VERSION_ARG=\"${CIRCLE_BRANCH}:$(date +%Y-%m-%dT%H:%M:%S)-${CIRCLE_SHA1:0:7}\"' \u003e\u003e \"$BASH_ENV\"\n        name: Setup environment variables\n    - setup_remote_docker:\n        docker_layer_caching: true\n    - run:\n        command: |\n          if cat /etc/issue | grep \"Alpine\" \u003e/dev/null 2\u003e\u00261; then\n              if [ \"$ID\" = 0 ]; then export SUDO=\"\"; else export SUDO=\"sudo\"; fi\n          else\n              if [[ $EUID == 0 ]]; then export SUDO=\"\"; else export SUDO=\"sudo\"; fi\n          fi\n\n          Install_AWS_CLI() {\n              echo \"Installing AWS CLI v2\"\n              cd /tmp || exit\n              # Platform check\n              if uname -a | grep \"Darwin\"; then\n                  export SYS_ENV_PLATFORM=macos\n              elif uname -a | grep \"x86_64 GNU/Linux\"; then\n                  export SYS_ENV_PLATFORM=linux_x86\n              elif uname -a | grep \"aarch64 GNU/Linux\"; then\n                  export SYS_ENV_PLATFORM=linux_arm\n              elif uname -a | grep \"x86_64 Msys\"; then\n                  export SYS_ENV_PLATFORM=windows\n              elif cat /etc/issue | grep \"Alpine\" \u003e/dev/null 2\u003e\u00261; then\n                  export SYS_ENV_PLATFORM=linux_alpine\n              else\n                  echo \"This platform appears to be unsupported.\"\n                  uname -a\n                  exit 1\n              fi\n\n              # Install per platform\n              case $SYS_ENV_PLATFORM in\n              linux_x86)\n                  curl -sSL \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip\" -o \"awscliv2.zip\"\n                  unzip -q -o awscliv2.zip\n                  $SUDO ./aws/install -i \"${PARAM_AWS_CLI_INSTALL_DIR}\" -b \"${PARAM_AWS_CLI_BINARY_DIR}\"\n                  rm -r awscliv2.zip ./aws\n                  ;;\n              windows)\n                  if [ ! \"$(command -v choco)\" ]; then\n                      echo \"Chocolatey is required to uninstall AWS\"\n                      exit 1\n                  fi\n                  choco install awscli --version=\"$1\"\n                  echo \"$1\"\n                  if echo \"$1\" | grep \"2.\"; then\n                      echo 'export PATH=\"${PATH}:/c/Program Files/Amazon/AWSCLIV2\"' \u003e\u003e\"$BASH_ENV\"\n                  else\n                      echo 'export PATH=\"${PATH}:/c/Program Files/Amazon/AWSCLI/bin\"' \u003e\u003e\"$BASH_ENV\"\n                  fi\n                  ;;\n              macos)\n                  curl -sSL \"https://awscli.amazonaws.com/AWSCLIV2$1.pkg\" -o \"AWSCLIV2.pkg\"\n                  $SUDO installer -pkg AWSCLIV2.pkg -target /\n                  rm AWSCLIV2.pkg\n                  ;;\n              linux_arm)\n                  curl -sSL \"https://awscli.amazonaws.com/awscli-exe-linux-aarch64$1.zip\" -o \"awscliv2.zip\"\n                  unzip -q -o awscliv2.zip\n                  $SUDO ./aws/install -i \"${PARAM_AWS_CLI_INSTALL_DIR}\" -b \"${PARAM_AWS_CLI_BINARY_DIR}\"\n                  rm -r awscliv2.zip ./aws\n                  ;;\n              linux_alpine)\n                  apk --no-cache add \\\n                      binutils \\\n                      curl\n\n                  curl -L https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub -o /etc/apk/keys/sgerrand.rsa.pub\n                  curl -LO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-2.34-r0.apk\n                  curl -LO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-bin-2.34-r0.apk\n                  curl -LO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-i18n-2.34-r0.apk\n\n                  apk add --no-cache \\\n                      glibc-2.34-r0.apk \\\n                      glibc-bin-2.34-r0.apk \\\n                      glibc-i18n-2.34-r0.apk\n\n                  /usr/glibc-compat/bin/localedef -i en_US -f UTF-8 en_US.UTF-8\n                  curl -sSL \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip\" -o \"awscliv2.zip\"\n\n                  echo \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip\"\n                  unzip awscliv2.zip\n                  aws/install\n                  rm -r awscliv2.zip ./aws\n                  ;;\n              *)\n                  echo \"This orb does not currently support your platform. If you believe it should, please consider opening an issue on the GitHub repository:\"\n                  echo \"https://github.com/CircleCI-Public/aws-cli-orb/issues/new\"\n                  exit 1\n                  ;;\n              esac\n              # Toggle AWS Pager\n              if [ \"$PARAM_AWS_CLI_DISABLE_PAGER\" = 1 ]; then\n                  if [ -z \"${AWS_PAGER+x}\" ]; then\n                      echo 'export AWS_PAGER=\"\"' \u003e\u003e\"$BASH_ENV\"\n                      echo \"AWS_PAGER is being set to the empty string to disable all output paging for AWS CLI commands.\"\n                      echo \"You can set the 'disable-aws-pager' parameter to 'false' to disable this behavior.\"\n                  fi\n              fi\n          }\n\n          Uninstall_AWS_CLI() {\n              if uname -a | grep \"x86_64 Msys\"; then\n                  if [ ! \"$(command -v choco)\" ]; then\n                      echo \"Chocolatey is required to uninstall AWS\"\n                      exit 1\n                  fi\n                  choco uninstall awscli\n              else\n                  AWS_CLI_PATH=$(command -v aws)\n                  echo \"$AWS_CLI_PATH\"\n                  if [ -n \"$AWS_CLI_PATH\" ]; then\n                      EXISTING_AWS_VERSION=$(aws --version)\n                      echo \"Uninstalling ${EXISTING_AWS_VERSION}\"\n                      # shellcheck disable=SC2012\n                      if [ -L \"$AWS_CLI_PATH\" ]; then\n                          AWS_SYMLINK_PATH=$(ls -l \"$AWS_CLI_PATH\" | sed -e 's/.* -\u003e //')\n                      fi\n                      if uname -a | grep \"x86_64 Msys\"; then export SUDO=\"\"; fi\n                      $SUDO rm -rf \"$AWS_CLI_PATH\" \"$AWS_SYMLINK_PATH\" \"$HOME/.aws/\" \"/usr/local/bin/aws\" \"/usr/local/bin/aws_completer\" \"/usr/local/aws-cli\"\n                  else\n                      echo \"No AWS install found\"\n                  fi\n              fi\n          }\n\n          if [ ! \"$(command -v aws)\" ]; then\n              if [ \"$PARAM_AWS_CLI_VERSION\" = \"latest\" ]; then\n                  Install_AWS_CLI\n              else\n                  if uname -a | grep \"x86_64 Msys\"; then\n                      Install_AWS_CLI \"${PARAM_AWS_CLI_VERSION}\"\n                  else\n                      Install_AWS_CLI \"-${PARAM_AWS_CLI_VERSION}\"\n                  fi\n              fi\n          elif [ \"$PARAM_AWS_CLI_OVERRIDE\" = 1 ]; then\n              Uninstall_AWS_CLI\n              if uname -a | grep \"x86_64 Msys\"; then\n                  Install_AWS_CLI \"${PARAM_AWS_CLI_VERSION}\"\n              else\n                  Install_AWS_CLI \"-${PARAM_AWS_CLI_VERSION}\"\n              fi\n          else\n              echo \"AWS CLI is already installed, skipping installation.\"\n              aws --version\n          fi\n        environment:\n          PARAM_AWS_CLI_BINARY_DIR: /usr/local/bin\n          PARAM_AWS_CLI_DISABLE_PAGER: true\n          PARAM_AWS_CLI_INSTALL_DIR: /usr/local/aws-cli\n          PARAM_AWS_CLI_OVERRIDE: false\n          PARAM_AWS_CLI_VERSION: latest\n        name: Install AWS CLI - latest\n    - run:\n        command: \"#!/bin/sh\\nif cat /etc/issue | grep \\\"Alpine\\\" \u003e/dev/null 2\u003e\u00261; then\\n    . $BASH_ENV\\nfi\\n\\nPARAM_AWS_CLI_ACCESS_KEY_ID=$(eval echo \\\"\\\\$$PARAM_AWS_CLI_ACCESS_KEY_ID\\\")\\nPARAM_AWS_CLI_SECRET_ACCESS_KEY=$(eval echo \\\"\\\\$$PARAM_AWS_CLI_SECRET_ACCESS_KEY\\\")\\nPARAM_AWS_CLI_REGION=$(eval echo \\\"\\\\$$PARAM_AWS_CLI_REGION\\\")\\n\\nif [ -z \\\"$PARAM_AWS_CLI_ACCESS_KEY_ID\\\" ] || [ -z \\\"${PARAM_AWS_CLI_SECRET_ACCESS_KEY}\\\" ]; then \\n    echo \\\"Cannot configure profile. AWS access key id and AWS secret access key must be provided.\\\"\\n    exit 1\\nfi\\n\\naws configure set aws_access_key_id \\\\\\n    \\\"$PARAM_AWS_CLI_ACCESS_KEY_ID\\\" \\\\\\n    --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\n\\naws configure set aws_secret_access_key \\\\\\n    \\\"$PARAM_AWS_CLI_SECRET_ACCESS_KEY\\\" \\\\\\n    --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\n\\nif [ -n \\\"${AWS_SESSION_TOKEN}\\\" ]; then\\n    aws configure set aws_session_token \\\\\\n        \\\"${AWS_SESSION_TOKEN}\\\" \\\\\\n        --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\nfi\\n\\nif [ \\\"$PARAM_AWS_CLI_CONFIG_DEFAULT_REGION\\\" = \\\"1\\\" ]; then\\n    aws configure set default.region \\\"$PARAM_AWS_CLI_REGION\\\" \\\\\\n        --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\nfi\\n\\nif [ \\\"$PARAM_AWS_CLI_CONFIG_PROFILE_REGION\\\" = \\\"1\\\" ]; then\\n    aws configure set region \\\"$PARAM_AWS_CLI_REGION\\\" \\\\\\n        --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\nfi\\n\"\n        environment:\n          PARAM_AWS_CLI_ACCESS_KEY_ID: AWS_ACCESS_KEY_ID\n          PARAM_AWS_CLI_CONFIG_DEFAULT_REGION: true\n          PARAM_AWS_CLI_CONFIG_PROFILE_REGION: true\n          PARAM_AWS_CLI_PROFILE_NAME: default\n          PARAM_AWS_CLI_REGION: AWS_DEFAULT_REGION\n          PARAM_AWS_CLI_SECRET_ACCESS_KEY: AWS_SECRET_ACCESS_KEY\n        name: Configure AWS Access Key ID\n    - run:\n        command: |\n          #!/bin/bash\n          ORB_EVAL_REGION=$(eval echo \"${ORB_EVAL_REGION}\")\n          ORB_VAL_ACCOUNT_URL=\"${!ORB_ENV_REGISTRY_ID}.dkr.ecr.${ORB_EVAL_REGION}.amazonaws.com\"\n          ECR_COMMAND=\"ecr\"\n\n          if [ -z \"${!ORB_ENV_REGISTRY_ID}\" ]; then\n            echo \"The registry ID is not found. Please add the registry ID as an environment variable in CicleCI before continuing.\"\n            exit 1\n          fi\n\n          if [ \"$ORB_VAL_PUBLIC_REGISTRY\" == \"1\" ]; then\n              ORB_EVAL_REGION=\"us-east-1\"\n              ORB_VAL_ACCOUNT_URL=\"public.ecr.aws\"\n              ECR_COMMAND=\"ecr-public\"\n          fi\n\n          if [ -n \"${ORB_VAL_PROFILE_NAME}\" ]; then\n              set -- \"$@\" --profile \"${ORB_VAL_PROFILE_NAME}\"\n          fi\n\n          #Shellcheck disable=SC2002\n          if [ -f \"$HOME/.docker/config.json\" ] \u0026\u0026 cat ~/.docker/config.json | grep \"${ORB_VAL_ACCOUNT_URL}\" \u003e /dev/null 2\u003e\u00261 ; then\n              echo \"Credential helper is already installed\"\n          else\n              aws \"${ECR_COMMAND}\" get-login-password --region \"${ORB_EVAL_REGION}\" \"$@\" | docker login --username AWS --password-stdin \"${ORB_VAL_ACCOUNT_URL}\"\n          fi\n        environment:\n          ORB_ENV_REGISTRY_ID: AWS_ECR_REGISTRY_ID\n          ORB_EVAL_REGION: ${AWS_REGION}\n          ORB_VAL_PROFILE_NAME: default\n          ORB_VAL_PUBLIC_REGISTRY: false\n        name: Log into Amazon ECR with profile default\n    - run:\n        command: |\n          docker buildx build --ssh default \\\n            --progress=plain \\\n            --build-arg \"IMAGE_VERSION_ARG=${IMAGE_VERSION_ARG}\" \\\n            --platform linux/amd64 \\\n            --tag ${LATEST_TAG} \\\n            --tag ${VERSION_TAG} \\\n            --file ${DOCKERFILE_PATH} \\\n            --push .\n        name: Build and Push Docker Image\n    - run:\n        command: |\n          echo 'export SOURCE_IMAGE=\"${AWS_ECR_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/domain-services/store-data-hub-event-processor\"' \u003e\u003e \"$BASH_ENV\"\n          echo 'export TARGET_IMAGE=\"${CIRCLE_PROJECT_REPONAME}_eventprocessor_to_promote\"' \u003e\u003e \"$BASH_ENV\"\n        name: Setup environment variables\n    - run:\n        command: |\n          docker tag ${SOURCE_IMAGE}:${CIRCLE_SHA1:0:7} ${TARGET_IMAGE}:${CIRCLE_SHA1:0:7}\n          docker save -o ${TARGET_IMAGE}.tar ${TARGET_IMAGE}:${CIRCLE_SHA1:0:7}\n        name: Save image to workspace\n  Build and Publish Pre-Prod:\n    docker:\n    - image: cimg/base:stable\n    resource_class: large\n    steps:\n    - attach_workspace:\n        at: .\n    - run:\n        command: |\n          echo 'export LATEST_TAG=\"${AWS_ECR_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/domain-services/store-data-hub-event-processor:latest\"' \u003e\u003e \"$BASH_ENV\"\n          echo 'export VERSION_TAG=\"${AWS_ECR_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/domain-services/store-data-hub-event-processor:${CIRCLE_SHA1:0:7}\"' \u003e\u003e \"$BASH_ENV\"\n          echo 'export DOCKERFILE_PATH=\"src/main/docker/Dockerfile.jvm\"' \u003e\u003e \"$BASH_ENV\"\n          echo 'export IMAGE_VERSION_ARG=\"${CIRCLE_BRANCH}:$(date +%Y-%m-%dT%H:%M:%S)-${CIRCLE_SHA1:0:7}\"' \u003e\u003e \"$BASH_ENV\"\n        name: Setup environment variables\n    - setup_remote_docker:\n        docker_layer_caching: true\n    - run:\n        command: |\n          if cat /etc/issue | grep \"Alpine\" \u003e/dev/null 2\u003e\u00261; then\n              if [ \"$ID\" = 0 ]; then export SUDO=\"\"; else export SUDO=\"sudo\"; fi\n          else\n              if [[ $EUID == 0 ]]; then export SUDO=\"\"; else export SUDO=\"sudo\"; fi\n          fi\n\n          Install_AWS_CLI() {\n              echo \"Installing AWS CLI v2\"\n              cd /tmp || exit\n              # Platform check\n              if uname -a | grep \"Darwin\"; then\n                  export SYS_ENV_PLATFORM=macos\n              elif uname -a | grep \"x86_64 GNU/Linux\"; then\n                  export SYS_ENV_PLATFORM=linux_x86\n              elif uname -a | grep \"aarch64 GNU/Linux\"; then\n                  export SYS_ENV_PLATFORM=linux_arm\n              elif uname -a | grep \"x86_64 Msys\"; then\n                  export SYS_ENV_PLATFORM=windows\n              elif cat /etc/issue | grep \"Alpine\" \u003e/dev/null 2\u003e\u00261; then\n                  export SYS_ENV_PLATFORM=linux_alpine\n              else\n                  echo \"This platform appears to be unsupported.\"\n                  uname -a\n                  exit 1\n              fi\n\n              # Install per platform\n              case $SYS_ENV_PLATFORM in\n              linux_x86)\n                  curl -sSL \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip\" -o \"awscliv2.zip\"\n                  unzip -q -o awscliv2.zip\n                  $SUDO ./aws/install -i \"${PARAM_AWS_CLI_INSTALL_DIR}\" -b \"${PARAM_AWS_CLI_BINARY_DIR}\"\n                  rm -r awscliv2.zip ./aws\n                  ;;\n              windows)\n                  if [ ! \"$(command -v choco)\" ]; then\n                      echo \"Chocolatey is required to uninstall AWS\"\n                      exit 1\n                  fi\n                  choco install awscli --version=\"$1\"\n                  echo \"$1\"\n                  if echo \"$1\" | grep \"2.\"; then\n                      echo 'export PATH=\"${PATH}:/c/Program Files/Amazon/AWSCLIV2\"' \u003e\u003e\"$BASH_ENV\"\n                  else\n                      echo 'export PATH=\"${PATH}:/c/Program Files/Amazon/AWSCLI/bin\"' \u003e\u003e\"$BASH_ENV\"\n                  fi\n                  ;;\n              macos)\n                  curl -sSL \"https://awscli.amazonaws.com/AWSCLIV2$1.pkg\" -o \"AWSCLIV2.pkg\"\n                  $SUDO installer -pkg AWSCLIV2.pkg -target /\n                  rm AWSCLIV2.pkg\n                  ;;\n              linux_arm)\n                  curl -sSL \"https://awscli.amazonaws.com/awscli-exe-linux-aarch64$1.zip\" -o \"awscliv2.zip\"\n                  unzip -q -o awscliv2.zip\n                  $SUDO ./aws/install -i \"${PARAM_AWS_CLI_INSTALL_DIR}\" -b \"${PARAM_AWS_CLI_BINARY_DIR}\"\n                  rm -r awscliv2.zip ./aws\n                  ;;\n              linux_alpine)\n                  apk --no-cache add \\\n                      binutils \\\n                      curl\n\n                  curl -L https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub -o /etc/apk/keys/sgerrand.rsa.pub\n                  curl -LO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-2.34-r0.apk\n                  curl -LO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-bin-2.34-r0.apk\n                  curl -LO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-i18n-2.34-r0.apk\n\n                  apk add --no-cache \\\n                      glibc-2.34-r0.apk \\\n                      glibc-bin-2.34-r0.apk \\\n                      glibc-i18n-2.34-r0.apk\n\n                  /usr/glibc-compat/bin/localedef -i en_US -f UTF-8 en_US.UTF-8\n                  curl -sSL \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip\" -o \"awscliv2.zip\"\n\n                  echo \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip\"\n                  unzip awscliv2.zip\n                  aws/install\n                  rm -r awscliv2.zip ./aws\n                  ;;\n              *)\n                  echo \"This orb does not currently support your platform. If you believe it should, please consider opening an issue on the GitHub repository:\"\n                  echo \"https://github.com/CircleCI-Public/aws-cli-orb/issues/new\"\n                  exit 1\n                  ;;\n              esac\n              # Toggle AWS Pager\n              if [ \"$PARAM_AWS_CLI_DISABLE_PAGER\" = 1 ]; then\n                  if [ -z \"${AWS_PAGER+x}\" ]; then\n                      echo 'export AWS_PAGER=\"\"' \u003e\u003e\"$BASH_ENV\"\n                      echo \"AWS_PAGER is being set to the empty string to disable all output paging for AWS CLI commands.\"\n                      echo \"You can set the 'disable-aws-pager' parameter to 'false' to disable this behavior.\"\n                  fi\n              fi\n          }\n\n          Uninstall_AWS_CLI() {\n              if uname -a | grep \"x86_64 Msys\"; then\n                  if [ ! \"$(command -v choco)\" ]; then\n                      echo \"Chocolatey is required to uninstall AWS\"\n                      exit 1\n                  fi\n                  choco uninstall awscli\n              else\n                  AWS_CLI_PATH=$(command -v aws)\n                  echo \"$AWS_CLI_PATH\"\n                  if [ -n \"$AWS_CLI_PATH\" ]; then\n                      EXISTING_AWS_VERSION=$(aws --version)\n                      echo \"Uninstalling ${EXISTING_AWS_VERSION}\"\n                      # shellcheck disable=SC2012\n                      if [ -L \"$AWS_CLI_PATH\" ]; then\n                          AWS_SYMLINK_PATH=$(ls -l \"$AWS_CLI_PATH\" | sed -e 's/.* -\u003e //')\n                      fi\n                      if uname -a | grep \"x86_64 Msys\"; then export SUDO=\"\"; fi\n                      $SUDO rm -rf \"$AWS_CLI_PATH\" \"$AWS_SYMLINK_PATH\" \"$HOME/.aws/\" \"/usr/local/bin/aws\" \"/usr/local/bin/aws_completer\" \"/usr/local/aws-cli\"\n                  else\n                      echo \"No AWS install found\"\n                  fi\n              fi\n          }\n\n          if [ ! \"$(command -v aws)\" ]; then\n              if [ \"$PARAM_AWS_CLI_VERSION\" = \"latest\" ]; then\n                  Install_AWS_CLI\n              else\n                  if uname -a | grep \"x86_64 Msys\"; then\n                      Install_AWS_CLI \"${PARAM_AWS_CLI_VERSION}\"\n                  else\n                      Install_AWS_CLI \"-${PARAM_AWS_CLI_VERSION}\"\n                  fi\n              fi\n          elif [ \"$PARAM_AWS_CLI_OVERRIDE\" = 1 ]; then\n              Uninstall_AWS_CLI\n              if uname -a | grep \"x86_64 Msys\"; then\n                  Install_AWS_CLI \"${PARAM_AWS_CLI_VERSION}\"\n              else\n                  Install_AWS_CLI \"-${PARAM_AWS_CLI_VERSION}\"\n              fi\n          else\n              echo \"AWS CLI is already installed, skipping installation.\"\n              aws --version\n          fi\n        environment:\n          PARAM_AWS_CLI_BINARY_DIR: /usr/local/bin\n          PARAM_AWS_CLI_DISABLE_PAGER: true\n          PARAM_AWS_CLI_INSTALL_DIR: /usr/local/aws-cli\n          PARAM_AWS_CLI_OVERRIDE: false\n          PARAM_AWS_CLI_VERSION: latest\n        name: Install AWS CLI - latest\n    - run:\n        command: \"#!/bin/sh\\nif cat /etc/issue | grep \\\"Alpine\\\" \u003e/dev/null 2\u003e\u00261; then\\n    . $BASH_ENV\\nfi\\n\\nPARAM_AWS_CLI_ACCESS_KEY_ID=$(eval echo \\\"\\\\$$PARAM_AWS_CLI_ACCESS_KEY_ID\\\")\\nPARAM_AWS_CLI_SECRET_ACCESS_KEY=$(eval echo \\\"\\\\$$PARAM_AWS_CLI_SECRET_ACCESS_KEY\\\")\\nPARAM_AWS_CLI_REGION=$(eval echo \\\"\\\\$$PARAM_AWS_CLI_REGION\\\")\\n\\nif [ -z \\\"$PARAM_AWS_CLI_ACCESS_KEY_ID\\\" ] || [ -z \\\"${PARAM_AWS_CLI_SECRET_ACCESS_KEY}\\\" ]; then \\n    echo \\\"Cannot configure profile. AWS access key id and AWS secret access key must be provided.\\\"\\n    exit 1\\nfi\\n\\naws configure set aws_access_key_id \\\\\\n    \\\"$PARAM_AWS_CLI_ACCESS_KEY_ID\\\" \\\\\\n    --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\n\\naws configure set aws_secret_access_key \\\\\\n    \\\"$PARAM_AWS_CLI_SECRET_ACCESS_KEY\\\" \\\\\\n    --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\n\\nif [ -n \\\"${AWS_SESSION_TOKEN}\\\" ]; then\\n    aws configure set aws_session_token \\\\\\n        \\\"${AWS_SESSION_TOKEN}\\\" \\\\\\n        --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\nfi\\n\\nif [ \\\"$PARAM_AWS_CLI_CONFIG_DEFAULT_REGION\\\" = \\\"1\\\" ]; then\\n    aws configure set default.region \\\"$PARAM_AWS_CLI_REGION\\\" \\\\\\n        --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\nfi\\n\\nif [ \\\"$PARAM_AWS_CLI_CONFIG_PROFILE_REGION\\\" = \\\"1\\\" ]; then\\n    aws configure set region \\\"$PARAM_AWS_CLI_REGION\\\" \\\\\\n        --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\nfi\\n\"\n        environment:\n          PARAM_AWS_CLI_ACCESS_KEY_ID: AWS_ACCESS_KEY_ID\n          PARAM_AWS_CLI_CONFIG_DEFAULT_REGION: true\n          PARAM_AWS_CLI_CONFIG_PROFILE_REGION: true\n          PARAM_AWS_CLI_PROFILE_NAME: default\n          PARAM_AWS_CLI_REGION: AWS_DEFAULT_REGION\n          PARAM_AWS_CLI_SECRET_ACCESS_KEY: AWS_SECRET_ACCESS_KEY\n        name: Configure AWS Access Key ID\n    - run:\n        command: |\n          #!/bin/bash\n          ORB_EVAL_REGION=$(eval echo \"${ORB_EVAL_REGION}\")\n          ORB_VAL_ACCOUNT_URL=\"${!ORB_ENV_REGISTRY_ID}.dkr.ecr.${ORB_EVAL_REGION}.amazonaws.com\"\n          ECR_COMMAND=\"ecr\"\n\n          if [ -z \"${!ORB_ENV_REGISTRY_ID}\" ]; then\n            echo \"The registry ID is not found. Please add the registry ID as an environment variable in CicleCI before continuing.\"\n            exit 1\n          fi\n\n          if [ \"$ORB_VAL_PUBLIC_REGISTRY\" == \"1\" ]; then\n              ORB_EVAL_REGION=\"us-east-1\"\n              ORB_VAL_ACCOUNT_URL=\"public.ecr.aws\"\n              ECR_COMMAND=\"ecr-public\"\n          fi\n\n          if [ -n \"${ORB_VAL_PROFILE_NAME}\" ]; then\n              set -- \"$@\" --profile \"${ORB_VAL_PROFILE_NAME}\"\n          fi\n\n          #Shellcheck disable=SC2002\n          if [ -f \"$HOME/.docker/config.json\" ] \u0026\u0026 cat ~/.docker/config.json | grep \"${ORB_VAL_ACCOUNT_URL}\" \u003e /dev/null 2\u003e\u00261 ; then\n              echo \"Credential helper is already installed\"\n          else\n              aws \"${ECR_COMMAND}\" get-login-password --region \"${ORB_EVAL_REGION}\" \"$@\" | docker login --username AWS --password-stdin \"${ORB_VAL_ACCOUNT_URL}\"\n          fi\n        environment:\n          ORB_ENV_REGISTRY_ID: AWS_ECR_REGISTRY_ID\n          ORB_EVAL_REGION: ${AWS_REGION}\n          ORB_VAL_PROFILE_NAME: default\n          ORB_VAL_PUBLIC_REGISTRY: false\n        name: Log into Amazon ECR with profile default\n    - run:\n        command: |\n          docker buildx build --ssh default \\\n            --progress=plain \\\n            --build-arg \"IMAGE_VERSION_ARG=${IMAGE_VERSION_ARG}\" \\\n            --platform linux/amd64 \\\n            --tag ${LATEST_TAG} \\\n            --tag ${VERSION_TAG} \\\n            --file ${DOCKERFILE_PATH} \\\n            --push .\n        name: Build and Push Docker Image\n    - run:\n        command: |\n          echo 'export SOURCE_IMAGE=\"${AWS_ECR_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/domain-services/store-data-hub-event-processor\"' \u003e\u003e \"$BASH_ENV\"\n          echo 'export TARGET_IMAGE=\"${CIRCLE_PROJECT_REPONAME}_eventprocessor_to_promote\"' \u003e\u003e \"$BASH_ENV\"\n        name: Setup environment variables\n    - run:\n        command: |\n          docker tag ${SOURCE_IMAGE}:${CIRCLE_SHA1:0:7} ${TARGET_IMAGE}:${CIRCLE_SHA1:0:7}\n          docker save -o ${TARGET_IMAGE}.tar ${TARGET_IMAGE}:${CIRCLE_SHA1:0:7}\n        name: Save image to workspace\n  Build and Test Dev:\n    docker:\n    - image: amazoncorretto:17-alpine3.17-jdk\n    - aws_auth:\n        oidc_role_arn: arn:aws:iam::977276688654:role/CircleCI-images-from-ecr\n      environment:\n        POSTGRES_DB: store_data_hub\n        POSTGRES_PASSWORD: hibernate\n        POSTGRES_USER: hibernate\n      image: 977276688654.dkr.ecr.us-west-2.amazonaws.com/domain-services/store-data-hub-custom-images:latest\n    resource_class: large\n    steps:\n    - attach_workspace:\n        at: .\n    - run:\n        command: |\n          ./gradlew build -x test -Dquarkus.profile=dev\n        name: Build\n    - run:\n        command: |\n          ./gradlew test -Dquarkus.profile=dev\n        name: Run Unit Tests\n    - run:\n        command: |\n          ./gradlew integrationTest -x test -Dquarkus.profile=dev\n        name: Run Integration Tests\n    - store_test_results:\n        path: ~/project/build/test-results\n    - store_artifacts:\n        destination: Reports\n        path: ~/project/build/reports\n    - persist_to_workspace:\n        paths:\n        - .\n        root: .\n  Build Pre-Prod:\n    docker:\n    - image: amazoncorretto:17-alpine3.17-jdk\n    resource_class: large\n    steps:\n    - attach_workspace:\n        at: .\n    - run:\n        command: |\n          ./gradlew build -x test -Dquarkus.profile=pre-prod\n        name: Build\n    - persist_to_workspace:\n        paths:\n        - .\n        root: .\n  Clone:\n    docker:\n    - image: cimg/base:stable\n    resource_class: large\n    steps:\n    - checkout\n    - persist_to_workspace:\n        paths:\n        - .\n        root: .\n  Build and Publish Dev:\n    docker:\n    - image: cimg/base:stable\n    resource_class: large\n    steps:\n    - attach_workspace:\n        at: .\n    - run:\n        command: |\n          echo 'export LATEST_TAG=\"${AWS_ECR_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/domain-services/store-data-hub-event-processor:latest\"' \u003e\u003e \"$BASH_ENV\"\n          echo 'export VERSION_TAG=\"${AWS_ECR_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/domain-services/store-data-hub-event-processor:${CIRCLE_SHA1:0:7}\"' \u003e\u003e \"$BASH_ENV\"\n          echo 'export DOCKERFILE_PATH=\"src/main/docker/Dockerfile.jvm\"' \u003e\u003e \"$BASH_ENV\"\n          echo 'export IMAGE_VERSION_ARG=\"${CIRCLE_BRANCH}:$(date +%Y-%m-%dT%H:%M:%S)-${CIRCLE_SHA1:0:7}\"' \u003e\u003e \"$BASH_ENV\"\n        name: Setup environment variables\n    - setup_remote_docker:\n        docker_layer_caching: true\n    - run:\n        command: |\n          if cat /etc/issue | grep \"Alpine\" \u003e/dev/null 2\u003e\u00261; then\n              if [ \"$ID\" = 0 ]; then export SUDO=\"\"; else export SUDO=\"sudo\"; fi\n          else\n              if [[ $EUID == 0 ]]; then export SUDO=\"\"; else export SUDO=\"sudo\"; fi\n          fi\n\n          Install_AWS_CLI() {\n              echo \"Installing AWS CLI v2\"\n              cd /tmp || exit\n              # Platform check\n              if uname -a | grep \"Darwin\"; then\n                  export SYS_ENV_PLATFORM=macos\n              elif uname -a | grep \"x86_64 GNU/Linux\"; then\n                  export SYS_ENV_PLATFORM=linux_x86\n              elif uname -a | grep \"aarch64 GNU/Linux\"; then\n                  export SYS_ENV_PLATFORM=linux_arm\n              elif uname -a | grep \"x86_64 Msys\"; then\n                  export SYS_ENV_PLATFORM=windows\n              elif cat /etc/issue | grep \"Alpine\" \u003e/dev/null 2\u003e\u00261; then\n                  export SYS_ENV_PLATFORM=linux_alpine\n              else\n                  echo \"This platform appears to be unsupported.\"\n                  uname -a\n                  exit 1\n              fi\n\n              # Install per platform\n              case $SYS_ENV_PLATFORM in\n              linux_x86)\n                  curl -sSL \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip\" -o \"awscliv2.zip\"\n                  unzip -q -o awscliv2.zip\n                  $SUDO ./aws/install -i \"${PARAM_AWS_CLI_INSTALL_DIR}\" -b \"${PARAM_AWS_CLI_BINARY_DIR}\"\n                  rm -r awscliv2.zip ./aws\n                  ;;\n              windows)\n                  if [ ! \"$(command -v choco)\" ]; then\n                      echo \"Chocolatey is required to uninstall AWS\"\n                      exit 1\n                  fi\n                  choco install awscli --version=\"$1\"\n                  echo \"$1\"\n                  if echo \"$1\" | grep \"2.\"; then\n                      echo 'export PATH=\"${PATH}:/c/Program Files/Amazon/AWSCLIV2\"' \u003e\u003e\"$BASH_ENV\"\n                  else\n                      echo 'export PATH=\"${PATH}:/c/Program Files/Amazon/AWSCLI/bin\"' \u003e\u003e\"$BASH_ENV\"\n                  fi\n                  ;;\n              macos)\n                  curl -sSL \"https://awscli.amazonaws.com/AWSCLIV2$1.pkg\" -o \"AWSCLIV2.pkg\"\n                  $SUDO installer -pkg AWSCLIV2.pkg -target /\n                  rm AWSCLIV2.pkg\n                  ;;\n              linux_arm)\n                  curl -sSL \"https://awscli.amazonaws.com/awscli-exe-linux-aarch64$1.zip\" -o \"awscliv2.zip\"\n                  unzip -q -o awscliv2.zip\n                  $SUDO ./aws/install -i \"${PARAM_AWS_CLI_INSTALL_DIR}\" -b \"${PARAM_AWS_CLI_BINARY_DIR}\"\n                  rm -r awscliv2.zip ./aws\n                  ;;\n              linux_alpine)\n                  apk --no-cache add \\\n                      binutils \\\n                      curl\n\n                  curl -L https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub -o /etc/apk/keys/sgerrand.rsa.pub\n                  curl -LO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-2.34-r0.apk\n                  curl -LO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-bin-2.34-r0.apk\n                  curl -LO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-i18n-2.34-r0.apk\n\n                  apk add --no-cache \\\n                      glibc-2.34-r0.apk \\\n                      glibc-bin-2.34-r0.apk \\\n                      glibc-i18n-2.34-r0.apk\n\n                  /usr/glibc-compat/bin/localedef -i en_US -f UTF-8 en_US.UTF-8\n                  curl -sSL \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip\" -o \"awscliv2.zip\"\n\n                  echo \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip\"\n                  unzip awscliv2.zip\n                  aws/install\n                  rm -r awscliv2.zip ./aws\n                  ;;\n              *)\n                  echo \"This orb does not currently support your platform. If you believe it should, please consider opening an issue on the GitHub repository:\"\n                  echo \"https://github.com/CircleCI-Public/aws-cli-orb/issues/new\"\n                  exit 1\n                  ;;\n              esac\n              # Toggle AWS Pager\n              if [ \"$PARAM_AWS_CLI_DISABLE_PAGER\" = 1 ]; then\n                  if [ -z \"${AWS_PAGER+x}\" ]; then\n                      echo 'export AWS_PAGER=\"\"' \u003e\u003e\"$BASH_ENV\"\n                      echo \"AWS_PAGER is being set to the empty string to disable all output paging for AWS CLI commands.\"\n                      echo \"You can set the 'disable-aws-pager' parameter to 'false' to disable this behavior.\"\n                  fi\n              fi\n          }\n\n          Uninstall_AWS_CLI() {\n              if uname -a | grep \"x86_64 Msys\"; then\n                  if [ ! \"$(command -v choco)\" ]; then\n                      echo \"Chocolatey is required to uninstall AWS\"\n                      exit 1\n                  fi\n                  choco uninstall awscli\n              else\n                  AWS_CLI_PATH=$(command -v aws)\n                  echo \"$AWS_CLI_PATH\"\n                  if [ -n \"$AWS_CLI_PATH\" ]; then\n                      EXISTING_AWS_VERSION=$(aws --version)\n                      echo \"Uninstalling ${EXISTING_AWS_VERSION}\"\n                      # shellcheck disable=SC2012\n                      if [ -L \"$AWS_CLI_PATH\" ]; then\n                          AWS_SYMLINK_PATH=$(ls -l \"$AWS_CLI_PATH\" | sed -e 's/.* -\u003e //')\n                      fi\n                      if uname -a | grep \"x86_64 Msys\"; then export SUDO=\"\"; fi\n                      $SUDO rm -rf \"$AWS_CLI_PATH\" \"$AWS_SYMLINK_PATH\" \"$HOME/.aws/\" \"/usr/local/bin/aws\" \"/usr/local/bin/aws_completer\" \"/usr/local/aws-cli\"\n                  else\n                      echo \"No AWS install found\"\n                  fi\n              fi\n          }\n\n          if [ ! \"$(command -v aws)\" ]; then\n              if [ \"$PARAM_AWS_CLI_VERSION\" = \"latest\" ]; then\n                  Install_AWS_CLI\n              else\n                  if uname -a | grep \"x86_64 Msys\"; then\n                      Install_AWS_CLI \"${PARAM_AWS_CLI_VERSION}\"\n                  else\n                      Install_AWS_CLI \"-${PARAM_AWS_CLI_VERSION}\"\n                  fi\n              fi\n          elif [ \"$PARAM_AWS_CLI_OVERRIDE\" = 1 ]; then\n              Uninstall_AWS_CLI\n              if uname -a | grep \"x86_64 Msys\"; then\n                  Install_AWS_CLI \"${PARAM_AWS_CLI_VERSION}\"\n              else\n                  Install_AWS_CLI \"-${PARAM_AWS_CLI_VERSION}\"\n              fi\n          else\n              echo \"AWS CLI is already installed, skipping installation.\"\n              aws --version\n          fi\n        environment:\n          PARAM_AWS_CLI_BINARY_DIR: /usr/local/bin\n          PARAM_AWS_CLI_DISABLE_PAGER: true\n          PARAM_AWS_CLI_INSTALL_DIR: /usr/local/aws-cli\n          PARAM_AWS_CLI_OVERRIDE: false\n          PARAM_AWS_CLI_VERSION: latest\n        name: Install AWS CLI - latest\n    - run:\n        command: \"#!/bin/sh\\nif cat /etc/issue | grep \\\"Alpine\\\" \u003e/dev/null 2\u003e\u00261; then\\n    . $BASH_ENV\\nfi\\n\\nPARAM_AWS_CLI_ACCESS_KEY_ID=$(eval echo \\\"\\\\$$PARAM_AWS_CLI_ACCESS_KEY_ID\\\")\\nPARAM_AWS_CLI_SECRET_ACCESS_KEY=$(eval echo \\\"\\\\$$PARAM_AWS_CLI_SECRET_ACCESS_KEY\\\")\\nPARAM_AWS_CLI_REGION=$(eval echo \\\"\\\\$$PARAM_AWS_CLI_REGION\\\")\\n\\nif [ -z \\\"$PARAM_AWS_CLI_ACCESS_KEY_ID\\\" ] || [ -z \\\"${PARAM_AWS_CLI_SECRET_ACCESS_KEY}\\\" ]; then \\n    echo \\\"Cannot configure profile. AWS access key id and AWS secret access key must be provided.\\\"\\n    exit 1\\nfi\\n\\naws configure set aws_access_key_id \\\\\\n    \\\"$PARAM_AWS_CLI_ACCESS_KEY_ID\\\" \\\\\\n    --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\n\\naws configure set aws_secret_access_key \\\\\\n    \\\"$PARAM_AWS_CLI_SECRET_ACCESS_KEY\\\" \\\\\\n    --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\n\\nif [ -n \\\"${AWS_SESSION_TOKEN}\\\" ]; then\\n    aws configure set aws_session_token \\\\\\n        \\\"${AWS_SESSION_TOKEN}\\\" \\\\\\n        --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\nfi\\n\\nif [ \\\"$PARAM_AWS_CLI_CONFIG_DEFAULT_REGION\\\" = \\\"1\\\" ]; then\\n    aws configure set default.region \\\"$PARAM_AWS_CLI_REGION\\\" \\\\\\n        --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\nfi\\n\\nif [ \\\"$PARAM_AWS_CLI_CONFIG_PROFILE_REGION\\\" = \\\"1\\\" ]; then\\n    aws configure set region \\\"$PARAM_AWS_CLI_REGION\\\" \\\\\\n        --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\nfi\\n\"\n        environment:\n          PARAM_AWS_CLI_ACCESS_KEY_ID: AWS_ACCESS_KEY_ID\n          PARAM_AWS_CLI_CONFIG_DEFAULT_REGION: true\n          PARAM_AWS_CLI_CONFIG_PROFILE_REGION: true\n          PARAM_AWS_CLI_PROFILE_NAME: default\n          PARAM_AWS_CLI_REGION: AWS_DEFAULT_REGION\n          PARAM_AWS_CLI_SECRET_ACCESS_KEY: AWS_SECRET_ACCESS_KEY\n        name: Configure AWS Access Key ID\n    - run:\n        command: |\n          #!/bin/bash\n          ORB_EVAL_REGION=$(eval echo \"${ORB_EVAL_REGION}\")\n          ORB_VAL_ACCOUNT_URL=\"${!ORB_ENV_REGISTRY_ID}.dkr.ecr.${ORB_EVAL_REGION}.amazonaws.com\"\n          ECR_COMMAND=\"ecr\"\n\n          if [ -z \"${!ORB_ENV_REGISTRY_ID}\" ]; then\n            echo \"The registry ID is not found. Please add the registry ID as an environment variable in CicleCI before continuing.\"\n            exit 1\n          fi\n\n          if [ \"$ORB_VAL_PUBLIC_REGISTRY\" == \"1\" ]; then\n              ORB_EVAL_REGION=\"us-east-1\"\n              ORB_VAL_ACCOUNT_URL=\"public.ecr.aws\"\n              ECR_COMMAND=\"ecr-public\"\n          fi\n\n          if [ -n \"${ORB_VAL_PROFILE_NAME}\" ]; then\n              set -- \"$@\" --profile \"${ORB_VAL_PROFILE_NAME}\"\n          fi\n\n          #Shellcheck disable=SC2002\n          if [ -f \"$HOME/.docker/config.json\" ] \u0026\u0026 cat ~/.docker/config.json | grep \"${ORB_VAL_ACCOUNT_URL}\" \u003e /dev/null 2\u003e\u00261 ; then\n              echo \"Credential helper is already installed\"\n          else\n              aws \"${ECR_COMMAND}\" get-login-password --region \"${ORB_EVAL_REGION}\" \"$@\" | docker login --username AWS --password-stdin \"${ORB_VAL_ACCOUNT_URL}\"\n          fi\n        environment:\n          ORB_ENV_REGISTRY_ID: AWS_ECR_REGISTRY_ID\n          ORB_EVAL_REGION: ${AWS_REGION}\n          ORB_VAL_PROFILE_NAME: default\n          ORB_VAL_PUBLIC_REGISTRY: false\n        name: Log into Amazon ECR with profile default\n    - run:\n        command: |\n          docker buildx build --ssh default \\\n            --progress=plain \\\n            --build-arg \"IMAGE_VERSION_ARG=${IMAGE_VERSION_ARG}\" \\\n            --platform linux/amd64 \\\n            --tag ${LATEST_TAG} \\\n            --tag ${VERSION_TAG} \\\n            --file ${DOCKERFILE_PATH} \\\n            --push .\n        name: Build and Push Docker Image\n    - run:\n        command: |\n          echo 'export SOURCE_IMAGE=\"${AWS_ECR_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/domain-services/store-data-hub-event-processor\"' \u003e\u003e \"$BASH_ENV\"\n          echo 'export TARGET_IMAGE=\"${CIRCLE_PROJECT_REPONAME}_eventprocessor_to_promote\"' \u003e\u003e \"$BASH_ENV\"\n        name: Setup environment variables\n    - run:\n        command: |\n          docker tag ${SOURCE_IMAGE}:${CIRCLE_SHA1:0:7} ${TARGET_IMAGE}:${CIRCLE_SHA1:0:7}\n          docker save -o ${TARGET_IMAGE}.tar ${TARGET_IMAGE}:${CIRCLE_SHA1:0:7}\n        name: Save image to workspace\n  Build and Publish Test:\n    docker:\n    - image: cimg/base:stable\n    resource_class: large\n    steps:\n    - attach_workspace:\n        at: .\n    - run:\n        command: |\n          echo 'export LATEST_TAG=\"${AWS_ECR_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/domain-services/store-data-hub-event-processor:latest\"' \u003e\u003e \"$BASH_ENV\"\n          echo 'export VERSION_TAG=\"${AWS_ECR_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/domain-services/store-data-hub-event-processor:${CIRCLE_SHA1:0:7}\"' \u003e\u003e \"$BASH_ENV\"\n          echo 'export DOCKERFILE_PATH=\"src/main/docker/Dockerfile.jvm\"' \u003e\u003e \"$BASH_ENV\"\n          echo 'export IMAGE_VERSION_ARG=\"${CIRCLE_BRANCH}:$(date +%Y-%m-%dT%H:%M:%S)-${CIRCLE_SHA1:0:7}\"' \u003e\u003e \"$BASH_ENV\"\n        name: Setup environment variables\n    - setup_remote_docker:\n        docker_layer_caching: true\n    - run:\n        command: |\n          if cat /etc/issue | grep \"Alpine\" \u003e/dev/null 2\u003e\u00261; then\n              if [ \"$ID\" = 0 ]; then export SUDO=\"\"; else export SUDO=\"sudo\"; fi\n          else\n              if [[ $EUID == 0 ]]; then export SUDO=\"\"; else export SUDO=\"sudo\"; fi\n          fi\n\n          Install_AWS_CLI() {\n              echo \"Installing AWS CLI v2\"\n              cd /tmp || exit\n              # Platform check\n              if uname -a | grep \"Darwin\"; then\n                  export SYS_ENV_PLATFORM=macos\n              elif uname -a | grep \"x86_64 GNU/Linux\"; then\n                  export SYS_ENV_PLATFORM=linux_x86\n              elif uname -a | grep \"aarch64 GNU/Linux\"; then\n                  export SYS_ENV_PLATFORM=linux_arm\n              elif uname -a | grep \"x86_64 Msys\"; then\n                  export SYS_ENV_PLATFORM=windows\n              elif cat /etc/issue | grep \"Alpine\" \u003e/dev/null 2\u003e\u00261; then\n                  export SYS_ENV_PLATFORM=linux_alpine\n              else\n                  echo \"This platform appears to be unsupported.\"\n                  uname -a\n                  exit 1\n              fi\n\n              # Install per platform\n              case $SYS_ENV_PLATFORM in\n              linux_x86)\n                  curl -sSL \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip\" -o \"awscliv2.zip\"\n                  unzip -q -o awscliv2.zip\n                  $SUDO ./aws/install -i \"${PARAM_AWS_CLI_INSTALL_DIR}\" -b \"${PARAM_AWS_CLI_BINARY_DIR}\"\n                  rm -r awscliv2.zip ./aws\n                  ;;\n              windows)\n                  if [ ! \"$(command -v choco)\" ]; then\n                      echo \"Chocolatey is required to uninstall AWS\"\n                      exit 1\n                  fi\n                  choco install awscli --version=\"$1\"\n                  echo \"$1\"\n                  if echo \"$1\" | grep \"2.\"; then\n                      echo 'export PATH=\"${PATH}:/c/Program Files/Amazon/AWSCLIV2\"' \u003e\u003e\"$BASH_ENV\"\n                  else\n                      echo 'export PATH=\"${PATH}:/c/Program Files/Amazon/AWSCLI/bin\"' \u003e\u003e\"$BASH_ENV\"\n                  fi\n                  ;;\n              macos)\n                  curl -sSL \"https://awscli.amazonaws.com/AWSCLIV2$1.pkg\" -o \"AWSCLIV2.pkg\"\n                  $SUDO installer -pkg AWSCLIV2.pkg -target /\n                  rm AWSCLIV2.pkg\n                  ;;\n              linux_arm)\n                  curl -sSL \"https://awscli.amazonaws.com/awscli-exe-linux-aarch64$1.zip\" -o \"awscliv2.zip\"\n                  unzip -q -o awscliv2.zip\n                  $SUDO ./aws/install -i \"${PARAM_AWS_CLI_INSTALL_DIR}\" -b \"${PARAM_AWS_CLI_BINARY_DIR}\"\n                  rm -r awscliv2.zip ./aws\n                  ;;\n              linux_alpine)\n                  apk --no-cache add \\\n                      binutils \\\n                      curl\n\n                  curl -L https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub -o /etc/apk/keys/sgerrand.rsa.pub\n                  curl -LO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-2.34-r0.apk\n                  curl -LO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-bin-2.34-r0.apk\n                  curl -LO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-i18n-2.34-r0.apk\n\n                  apk add --no-cache \\\n                      glibc-2.34-r0.apk \\\n                      glibc-bin-2.34-r0.apk \\\n                      glibc-i18n-2.34-r0.apk\n\n                  /usr/glibc-compat/bin/localedef -i en_US -f UTF-8 en_US.UTF-8\n                  curl -sSL \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip\" -o \"awscliv2.zip\"\n\n                  echo \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip\"\n                  unzip awscliv2.zip\n                  aws/install\n                  rm -r awscliv2.zip ./aws\n                  ;;\n              *)\n                  echo \"This orb does not currently support your platform. If you believe it should, please consider opening an issue on the GitHub repository:\"\n                  echo \"https://github.com/CircleCI-Public/aws-cli-orb/issues/new\"\n                  exit 1\n                  ;;\n              esac\n              # Toggle AWS Pager\n              if [ \"$PARAM_AWS_CLI_DISABLE_PAGER\" = 1 ]; then\n                  if [ -z \"${AWS_PAGER+x}\" ]; then\n                      echo 'export AWS_PAGER=\"\"' \u003e\u003e\"$BASH_ENV\"\n                      echo \"AWS_PAGER is being set to the empty string to disable all output paging for AWS CLI commands.\"\n                      echo \"You can set the 'disable-aws-pager' parameter to 'false' to disable this behavior.\"\n                  fi\n              fi\n          }\n\n          Uninstall_AWS_CLI() {\n              if uname -a | grep \"x86_64 Msys\"; then\n                  if [ ! \"$(command -v choco)\" ]; then\n                      echo \"Chocolatey is required to uninstall AWS\"\n                      exit 1\n                  fi\n                  choco uninstall awscli\n              else\n                  AWS_CLI_PATH=$(command -v aws)\n                  echo \"$AWS_CLI_PATH\"\n                  if [ -n \"$AWS_CLI_PATH\" ]; then\n                      EXISTING_AWS_VERSION=$(aws --version)\n                      echo \"Uninstalling ${EXISTING_AWS_VERSION}\"\n                      # shellcheck disable=SC2012\n                      if [ -L \"$AWS_CLI_PATH\" ]; then\n                          AWS_SYMLINK_PATH=$(ls -l \"$AWS_CLI_PATH\" | sed -e 's/.* -\u003e //')\n                      fi\n                      if uname -a | grep \"x86_64 Msys\"; then export SUDO=\"\"; fi\n                      $SUDO rm -rf \"$AWS_CLI_PATH\" \"$AWS_SYMLINK_PATH\" \"$HOME/.aws/\" \"/usr/local/bin/aws\" \"/usr/local/bin/aws_completer\" \"/usr/local/aws-cli\"\n                  else\n                      echo \"No AWS install found\"\n                  fi\n              fi\n          }\n\n          if [ ! \"$(command -v aws)\" ]; then\n              if [ \"$PARAM_AWS_CLI_VERSION\" = \"latest\" ]; then\n                  Install_AWS_CLI\n              else\n                  if uname -a | grep \"x86_64 Msys\"; then\n                      Install_AWS_CLI \"${PARAM_AWS_CLI_VERSION}\"\n                  else\n                      Install_AWS_CLI \"-${PARAM_AWS_CLI_VERSION}\"\n                  fi\n              fi\n          elif [ \"$PARAM_AWS_CLI_OVERRIDE\" = 1 ]; then\n              Uninstall_AWS_CLI\n              if uname -a | grep \"x86_64 Msys\"; then\n                  Install_AWS_CLI \"${PARAM_AWS_CLI_VERSION}\"\n              else\n                  Install_AWS_CLI \"-${PARAM_AWS_CLI_VERSION}\"\n              fi\n          else\n              echo \"AWS CLI is already installed, skipping installation.\"\n              aws --version\n          fi\n        environment:\n          PARAM_AWS_CLI_BINARY_DIR: /usr/local/bin\n          PARAM_AWS_CLI_DISABLE_PAGER: true\n          PARAM_AWS_CLI_INSTALL_DIR: /usr/local/aws-cli\n          PARAM_AWS_CLI_OVERRIDE: false\n          PARAM_AWS_CLI_VERSION: latest\n        name: Install AWS CLI - latest\n    - run:\n        command: \"#!/bin/sh\\nif cat /etc/issue | grep \\\"Alpine\\\" \u003e/dev/null 2\u003e\u00261; then\\n    . $BASH_ENV\\nfi\\n\\nPARAM_AWS_CLI_ACCESS_KEY_ID=$(eval echo \\\"\\\\$$PARAM_AWS_CLI_ACCESS_KEY_ID\\\")\\nPARAM_AWS_CLI_SECRET_ACCESS_KEY=$(eval echo \\\"\\\\$$PARAM_AWS_CLI_SECRET_ACCESS_KEY\\\")\\nPARAM_AWS_CLI_REGION=$(eval echo \\\"\\\\$$PARAM_AWS_CLI_REGION\\\")\\n\\nif [ -z \\\"$PARAM_AWS_CLI_ACCESS_KEY_ID\\\" ] || [ -z \\\"${PARAM_AWS_CLI_SECRET_ACCESS_KEY}\\\" ]; then \\n    echo \\\"Cannot configure profile. AWS access key id and AWS secret access key must be provided.\\\"\\n    exit 1\\nfi\\n\\naws configure set aws_access_key_id \\\\\\n    \\\"$PARAM_AWS_CLI_ACCESS_KEY_ID\\\" \\\\\\n    --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\n\\naws configure set aws_secret_access_key \\\\\\n    \\\"$PARAM_AWS_CLI_SECRET_ACCESS_KEY\\\" \\\\\\n    --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\n\\nif [ -n \\\"${AWS_SESSION_TOKEN}\\\" ]; then\\n    aws configure set aws_session_token \\\\\\n        \\\"${AWS_SESSION_TOKEN}\\\" \\\\\\n        --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\nfi\\n\\nif [ \\\"$PARAM_AWS_CLI_CONFIG_DEFAULT_REGION\\\" = \\\"1\\\" ]; then\\n    aws configure set default.region \\\"$PARAM_AWS_CLI_REGION\\\" \\\\\\n        --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\nfi\\n\\nif [ \\\"$PARAM_AWS_CLI_CONFIG_PROFILE_REGION\\\" = \\\"1\\\" ]; then\\n    aws configure set region \\\"$PARAM_AWS_CLI_REGION\\\" \\\\\\n        --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\nfi\\n\"\n        environment:\n          PARAM_AWS_CLI_ACCESS_KEY_ID: AWS_ACCESS_KEY_ID\n          PARAM_AWS_CLI_CONFIG_DEFAULT_REGION: true\n          PARAM_AWS_CLI_CONFIG_PROFILE_REGION: true\n          PARAM_AWS_CLI_PROFILE_NAME: default\n          PARAM_AWS_CLI_REGION: AWS_DEFAULT_REGION\n          PARAM_AWS_CLI_SECRET_ACCESS_KEY: AWS_SECRET_ACCESS_KEY\n        name: Configure AWS Access Key ID\n    - run:\n        command: |\n          #!/bin/bash\n          ORB_EVAL_REGION=$(eval echo \"${ORB_EVAL_REGION}\")\n          ORB_VAL_ACCOUNT_URL=\"${!ORB_ENV_REGISTRY_ID}.dkr.ecr.${ORB_EVAL_REGION}.amazonaws.com\"\n          ECR_COMMAND=\"ecr\"\n\n          if [ -z \"${!ORB_ENV_REGISTRY_ID}\" ]; then\n            echo \"The registry ID is not found. Please add the registry ID as an environment variable in CicleCI before continuing.\"\n            exit 1\n          fi\n\n          if [ \"$ORB_VAL_PUBLIC_REGISTRY\" == \"1\" ]; then\n              ORB_EVAL_REGION=\"us-east-1\"\n              ORB_VAL_ACCOUNT_URL=\"public.ecr.aws\"\n              ECR_COMMAND=\"ecr-public\"\n          fi\n\n          if [ -n \"${ORB_VAL_PROFILE_NAME}\" ]; then\n              set -- \"$@\" --profile \"${ORB_VAL_PROFILE_NAME}\"\n          fi\n\n          #Shellcheck disable=SC2002\n          if [ -f \"$HOME/.docker/config.json\" ] \u0026\u0026 cat ~/.docker/config.json | grep \"${ORB_VAL_ACCOUNT_URL}\" \u003e /dev/null 2\u003e\u00261 ; then\n              echo \"Credential helper is already installed\"\n          else\n              aws \"${ECR_COMMAND}\" get-login-password --region \"${ORB_EVAL_REGION}\" \"$@\" | docker login --username AWS --password-stdin \"${ORB_VAL_ACCOUNT_URL}\"\n          fi\n        environment:\n          ORB_ENV_REGISTRY_ID: AWS_ECR_REGISTRY_ID\n          ORB_EVAL_REGION: ${AWS_REGION}\n          ORB_VAL_PROFILE_NAME: default\n          ORB_VAL_PUBLIC_REGISTRY: false\n        name: Log into Amazon ECR with profile default\n    - run:\n        command: |\n          docker buildx build --ssh default \\\n            --progress=plain \\\n            --build-arg \"IMAGE_VERSION_ARG=${IMAGE_VERSION_ARG}\" \\\n            --platform linux/amd64 \\\n            --tag ${LATEST_TAG} \\\n            --tag ${VERSION_TAG} \\\n            --file ${DOCKERFILE_PATH} \\\n            --push .\n        name: Build and Push Docker Image\n    - run:\n        command: |\n          echo 'export SOURCE_IMAGE=\"${AWS_ECR_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/domain-services/store-data-hub-event-processor\"' \u003e\u003e \"$BASH_ENV\"\n          echo 'export TARGET_IMAGE=\"${CIRCLE_PROJECT_REPONAME}_eventprocessor_to_promote\"' \u003e\u003e \"$BASH_ENV\"\n        name: Setup environment variables\n    - run:\n        command: |\n          docker tag ${SOURCE_IMAGE}:${CIRCLE_SHA1:0:7} ${TARGET_IMAGE}:${CIRCLE_SHA1:0:7}\n          docker save -o ${TARGET_IMAGE}.tar ${TARGET_IMAGE}:${CIRCLE_SHA1:0:7}\n        name: Save image to workspace\n  Make Live Dev:\n    docker:\n    - image: cimg/base:stable\n    resource_class: large\n    steps:\n    - run:\n        command: |\n          if cat /etc/issue | grep \"Alpine\" \u003e/dev/null 2\u003e\u00261; then\n              if [ \"$ID\" = 0 ]; then export SUDO=\"\"; else export SUDO=\"sudo\"; fi\n          else\n              if [[ $EUID == 0 ]]; then export SUDO=\"\"; else export SUDO=\"sudo\"; fi\n          fi\n\n          Install_AWS_CLI() {\n              echo \"Installing AWS CLI v2\"\n              cd /tmp || exit\n              # Platform check\n              if uname -a | grep \"Darwin\"; then\n                  export SYS_ENV_PLATFORM=macos\n              elif uname -a | grep \"x86_64 GNU/Linux\"; then\n                  export SYS_ENV_PLATFORM=linux_x86\n              elif uname -a | grep \"aarch64 GNU/Linux\"; then\n                  export SYS_ENV_PLATFORM=linux_arm\n              elif uname -a | grep \"x86_64 Msys\"; then\n                  export SYS_ENV_PLATFORM=windows\n              elif cat /etc/issue | grep \"Alpine\" \u003e/dev/null 2\u003e\u00261; then\n                  export SYS_ENV_PLATFORM=linux_alpine\n              else\n                  echo \"This platform appears to be unsupported.\"\n                  uname -a\n                  exit 1\n              fi\n\n              # Install per platform\n              case $SYS_ENV_PLATFORM in\n              linux_x86)\n                  curl -sSL \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip\" -o \"awscliv2.zip\"\n                  unzip -q -o awscliv2.zip\n                  $SUDO ./aws/install -i \"${PARAM_AWS_CLI_INSTALL_DIR}\" -b \"${PARAM_AWS_CLI_BINARY_DIR}\"\n                  rm -r awscliv2.zip ./aws\n                  ;;\n              windows)\n                  if [ ! \"$(command -v choco)\" ]; then\n                      echo \"Chocolatey is required to uninstall AWS\"\n                      exit 1\n                  fi\n                  choco install awscli --version=\"$1\"\n                  echo \"$1\"\n                  if echo \"$1\" | grep \"2.\"; then\n                      echo 'export PATH=\"${PATH}:/c/Program Files/Amazon/AWSCLIV2\"' \u003e\u003e\"$BASH_ENV\"\n                  else\n                      echo 'export PATH=\"${PATH}:/c/Program Files/Amazon/AWSCLI/bin\"' \u003e\u003e\"$BASH_ENV\"\n                  fi\n                  ;;\n              macos)\n                  curl -sSL \"https://awscli.amazonaws.com/AWSCLIV2$1.pkg\" -o \"AWSCLIV2.pkg\"\n                  $SUDO installer -pkg AWSCLIV2.pkg -target /\n                  rm AWSCLIV2.pkg\n                  ;;\n              linux_arm)\n                  curl -sSL \"https://awscli.amazonaws.com/awscli-exe-linux-aarch64$1.zip\" -o \"awscliv2.zip\"\n                  unzip -q -o awscliv2.zip\n                  $SUDO ./aws/install -i \"${PARAM_AWS_CLI_INSTALL_DIR}\" -b \"${PARAM_AWS_CLI_BINARY_DIR}\"\n                  rm -r awscliv2.zip ./aws\n                  ;;\n              linux_alpine)\n                  apk --no-cache add \\\n                      binutils \\\n                      curl\n\n                  curl -L https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub -o /etc/apk/keys/sgerrand.rsa.pub\n                  curl -LO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-2.34-r0.apk\n                  curl -LO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-bin-2.34-r0.apk\n                  curl -LO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-i18n-2.34-r0.apk\n\n                  apk add --force-overwrite --no-cache \\\n                      glibc-2.34-r0.apk \\\n                      glibc-bin-2.34-r0.apk \\\n                      glibc-i18n-2.34-r0.apk\n\n                  /usr/glibc-compat/bin/localedef -i en_US -f UTF-8 en_US.UTF-8\n                  curl -sSL \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip\" -o \"awscliv2.zip\"\n\n                  echo \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip\"\n                  unzip awscliv2.zip\n                  aws/install\n                  rm -r awscliv2.zip ./aws\n                  ;;\n              *)\n                  echo \"This orb does not currently support your platform. If you believe it should, please consider opening an issue on the GitHub repository:\"\n                  echo \"https://github.com/CircleCI-Public/aws-cli-orb/issues/new\"\n                  exit 1\n                  ;;\n              esac\n              # Toggle AWS Pager\n              if [ \"$PARAM_AWS_CLI_DISABLE_PAGER\" = 1 ]; then\n                  if [ -z \"${AWS_PAGER+x}\" ]; then\n                      echo 'export AWS_PAGER=\"\"' \u003e\u003e\"$BASH_ENV\"\n                      echo \"AWS_PAGER is being set to the empty string to disable all output paging for AWS CLI commands.\"\n                      echo \"You can set the 'disable-aws-pager' parameter to 'false' to disable this behavior.\"\n                  fi\n              fi\n          }\n\n          Uninstall_AWS_CLI() {\n              if uname -a | grep \"x86_64 Msys\"; then\n                  if [ ! \"$(command -v choco)\" ]; then\n                      echo \"Chocolatey is required to uninstall AWS\"\n                      exit 1\n                  fi\n                  choco uninstall awscli\n              else\n                  AWS_CLI_PATH=$(command -v aws)\n                  echo \"$AWS_CLI_PATH\"\n                  if [ -n \"$AWS_CLI_PATH\" ]; then\n                      EXISTING_AWS_VERSION=$(aws --version)\n                      echo \"Uninstalling ${EXISTING_AWS_VERSION}\"\n                      # shellcheck disable=SC2012\n                      if [ -L \"$AWS_CLI_PATH\" ]; then\n                          AWS_SYMLINK_PATH=$(ls -l \"$AWS_CLI_PATH\" | sed -e 's/.* -\u003e //')\n                      fi\n                      if uname -a | grep \"x86_64 Msys\"; then export SUDO=\"\"; fi\n                      $SUDO rm -rf \"$AWS_CLI_PATH\" \"$AWS_SYMLINK_PATH\" \"$HOME/.aws/\" \"/usr/local/bin/aws\" \"/usr/local/bin/aws_completer\" \"/usr/local/aws-cli\"\n                  else\n                      echo \"No AWS install found\"\n                  fi\n              fi\n          }\n\n          if [ ! \"$(command -v aws)\" ]; then\n              if [ \"$PARAM_AWS_CLI_VERSION\" = \"latest\" ]; then\n                  Install_AWS_CLI\n              else\n                  if uname -a | grep \"x86_64 Msys\"; then\n                      Install_AWS_CLI \"${PARAM_AWS_CLI_VERSION}\"\n                  else\n                      Install_AWS_CLI \"-${PARAM_AWS_CLI_VERSION}\"\n                  fi\n              fi\n          elif [ \"$PARAM_AWS_CLI_OVERRIDE\" = 1 ]; then\n              Uninstall_AWS_CLI\n              if uname -a | grep \"x86_64 Msys\"; then\n                  Install_AWS_CLI \"${PARAM_AWS_CLI_VERSION}\"\n              else\n                  Install_AWS_CLI \"-${PARAM_AWS_CLI_VERSION}\"\n              fi\n          else\n              echo \"AWS CLI is already installed, skipping installation.\"\n              aws --version\n          fi\n        environment:\n          PARAM_AWS_CLI_BINARY_DIR: /usr/local/bin\n          PARAM_AWS_CLI_DISABLE_PAGER: true\n          PARAM_AWS_CLI_INSTALL_DIR: /usr/local/aws-cli\n          PARAM_AWS_CLI_OVERRIDE: false\n          PARAM_AWS_CLI_VERSION: latest\n        name: Install AWS CLI - latest\n    - run:\n        command: \"#!/bin/sh\\nif cat /etc/issue | grep \\\"Alpine\\\" \u003e/dev/null 2\u003e\u00261; then\\n    . $BASH_ENV\\nfi\\n\\nPARAM_AWS_CLI_ACCESS_KEY_ID=$(eval echo \\\"\\\\$$PARAM_AWS_CLI_ACCESS_KEY_ID\\\")\\nPARAM_AWS_CLI_SECRET_ACCESS_KEY=$(eval echo \\\"\\\\$$PARAM_AWS_CLI_SECRET_ACCESS_KEY\\\")\\nPARAM_AWS_CLI_REGION=$(eval echo \\\"\\\\$$PARAM_AWS_CLI_REGION\\\")\\n\\nif [ -z \\\"$PARAM_AWS_CLI_ACCESS_KEY_ID\\\" ] || [ -z \\\"${PARAM_AWS_CLI_SECRET_ACCESS_KEY}\\\" ]; then \\n    echo \\\"Cannot configure profile. AWS access key id and AWS secret access key must be provided.\\\"\\n    exit 1\\nfi\\n\\naws configure set aws_access_key_id \\\\\\n    \\\"$PARAM_AWS_CLI_ACCESS_KEY_ID\\\" \\\\\\n    --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\n\\naws configure set aws_secret_access_key \\\\\\n    \\\"$PARAM_AWS_CLI_SECRET_ACCESS_KEY\\\" \\\\\\n    --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\n\\nif [ -n \\\"${AWS_SESSION_TOKEN}\\\" ]; then\\n    aws configure set aws_session_token \\\\\\n        \\\"${AWS_SESSION_TOKEN}\\\" \\\\\\n        --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\nfi\\n\\nif [ \\\"$PARAM_AWS_CLI_CONFIG_DEFAULT_REGION\\\" = \\\"1\\\" ]; then\\n    aws configure set default.region \\\"$PARAM_AWS_CLI_REGION\\\" \\\\\\n        --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\nfi\\n\\nif [ \\\"$PARAM_AWS_CLI_CONFIG_PROFILE_REGION\\\" = \\\"1\\\" ]; then\\n    aws configure set region \\\"$PARAM_AWS_CLI_REGION\\\" \\\\\\n        --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\nfi\\n\"\n        environment:\n          PARAM_AWS_CLI_ACCESS_KEY_ID: AWS_ACCESS_KEY_ID\n          PARAM_AWS_CLI_CONFIG_DEFAULT_REGION: true\n          PARAM_AWS_CLI_CONFIG_PROFILE_REGION: true\n          PARAM_AWS_CLI_PROFILE_NAME: default\n          PARAM_AWS_CLI_REGION: AWS_REGION\n          PARAM_AWS_CLI_SECRET_ACCESS_KEY: AWS_SECRET_ACCESS_KEY\n        name: Configure AWS Access Key ID\n    - restore_cache:\n        keys:\n        - v1_python_install\n        name: Restoring cache Python command\n    - run:\n        command: |\n          if [[ ! -f \"/usr/bin/python\" ]]; then\n            echo \"Installing Python\"\n            sudo apt-get install python\n          else\n            echo \"Python is already installed.\"\n          fi\n        name: Install Python\n    - save_cache:\n        key: v1_python_install\n        name: Saving cache Python command\n        paths:\n        - /usr/bin/python\n    - run:\n        command: |\n          TASK_DEFINITION_ARN=$(aws ecs describe-task-definition \\\n            --task-definition store-data-hub-event-processor \\\n            --output text \\\n            --query 'taskDefinition.taskDefinitionArn' \\\n            --profile=)\n          echo \"export CCI_ORB_AWS_ECS_REGISTERED_TASK_DFN='${TASK_DEFINITION_ARN}'\" \u003e\u003e $BASH_ENV\n        name: Retrieve previous task definition\n    - run:\n        command: \"set -o noglob\\n\\n# These variables are evaluated so the config file may contain and pass in environment variables to the parameters.\\nECS_PARAM_FAMILY=$(eval echo \\\"$ECS_PARAM_FAMILY\\\")\\nECS_PARAM_CLUSTER_NAME=$(eval echo \\\"$ECS_PARAM_CLUSTER_NAME\\\")\\nECS_PARAM_SERVICE_NAME=$(eval echo \\\"$ECS_PARAM_SERVICE_NAME\\\")\\nECS_PARAM_PROFILE_NAME=$(eval echo \\\"$ECS_PARAM_PROFILE_NAME\\\")\\n\\nif [ -z \\\"${ECS_PARAM_SERVICE_NAME}\\\" ]; then\\n    ECS_PARAM_SERVICE_NAME=\\\"$ECS_PARAM_FAMILY\\\"\\nfi\\n\\nif [ \\\"$ECS_PARAM_FORCE_NEW_DEPLOY\\\" == \\\"1\\\" ]; then\\n    set -- \\\"$@\\\" --force-new-deployment\\nfi\\n\\nif [ -n \\\"${ECS_PARAM_PROFILE_NAME}\\\" ]; then\\n    set -- \\\"$@\\\" --profile \\\"${ECS_PARAM_PROFILE_NAME}\\\"   \\nfi\\n\\nif [ \\\"$ECS_PARAM_ENABLE_CIRCUIT_BREAKER\\\" == \\\"1\\\" ]; then\\n    set -- \\\"$@\\\" --deployment-configuration \\\"deploymentCircuitBreaker={enable=true,rollback=true}\\\"\\nfi\\n\\nDEPLOYED_REVISION=$(aws ecs update-service \\\\\\n    --cluster \\\"$ECS_PARAM_CLUSTER_NAME\\\" \\\\\\n    --service \\\"${ECS_PARAM_SERVICE_NAME}\\\" \\\\\\n    --task-definition \\\"${CCI_ORB_AWS_ECS_REGISTERED_TASK_DFN}\\\" \\\\\\n    --output text \\\\\\n    --query service.taskDefinition \\\\\\n    \\\"$@\\\")\\necho \\\"export CCI_ORB_AWS_ECS_DEPLOYED_REVISION='${DEPLOYED_REVISION}'\\\" \u003e\u003e \\\"$BASH_ENV\\\"\\n\"\n        environment:\n          ECS_PARAM_CLUSTER_NAME: store_data_hub_fargate_cluster\n          ECS_PARAM_ENABLE_CIRCUIT_BREAKER: false\n          ECS_PARAM_FAMILY: store-data-hub-event-processor\n          ECS_PARAM_FORCE_NEW_DEPLOY: true\n          ECS_PARAM_PROFILE_NAME: ''\n          ECS_PARAM_SERVICE_NAME: store-data-hub-event-processor-service\n        name: Update service with registered task definition\n    - run:\n        command: \"# These variables are evaluated so the config file may contain and pass in environment variables to the parameters.\\nECS_PARAM_FAMILY=$(eval echo \\\"$ECS_PARAM_FAMILY\\\")\\nECS_PARAM_SERVICE_NAME=$(eval echo \\\"$ECS_PARAM_SERVICE_NAME\\\")\\nECS_PARAM_CLUSTER_NAME=$(eval echo \\\"$ECS_PARAM_CLUSTER_NAME\\\")\\nECS_PARAM_TASK_DEF_ARN=$(eval echo \\\"$ECS_PARAM_TASK_DEF_ARN\\\")\\nECS_PARAM_PROFILE_NAME=$(eval echo \\\"$ECS_PARAM_PROFILE_NAME\\\")\\n\\nif [ \\\"$ECS_PARAM_TASK_DEF_ARN\\\" = \\\"\\\" ]; then\\n    echo \\\"Invalid task-definition-arn parameter value: $ECS_PARAM_TASK_DEF_ARN\\\"\\n    exit 1\\nfi\\n\\n\\nif [ -z \\\"${ECS_PARAM_SERVICE_NAME}\\\" ]; then\\n    ECS_PARAM_SERVICE_NAME=\\\"$ECS_PARAM_FAMILY\\\"\\nfi\\n\\necho \\\"Verifying that $ECS_PARAM_TASK_DEF_ARN is deployed..\\\"\\n\\nattempt=0\\n\\nwhile [ \\\"$attempt\\\" -lt \\\"$ECS_PARAM_MAX_POLL_ATTEMPTS\\\" ]\\n\\ndo  \\n    if [ -n \\\"${ECS_PARAM_PROFILE_NAME}\\\" ]; then\\n        set -- \\\"$@\\\" --profile=\\\"${ECS_PARAM_PROFILE_NAME}\\\"   \\n    fi\\n\\n    DEPLOYMENTS=$(aws ecs describe-services \\\\\\n        --cluster \\\"$ECS_PARAM_CLUSTER_NAME\\\" \\\\\\n        --services \\\"${ECS_PARAM_SERVICE_NAME}\\\" \\\\\\n        --output text \\\\\\n        --query 'services[0].deployments[].[taskDefinition, status]' \\\\\\n        \\\"$@\\\")\\n    NUM_DEPLOYMENTS=$(aws ecs describe-services \\\\\\n        --cluster \\\"$ECS_PARAM_CLUSTER_NAME\\\" \\\\\\n        --services \\\"${ECS_PARAM_SERVICE_NAME}\\\" \\\\\\n        --output text \\\\\\n        --query 'length(services[0].deployments)' \\\\\\n        \\\"$@\\\")\\n    TARGET_REVISION=$(aws ecs describe-services \\\\\\n        --cluster \\\"$ECS_PARAM_CLUSTER_NAME\\\" \\\\\\n        --services \\\"${ECS_PARAM_SERVICE_NAME}\\\" \\\\\\n        --output text \\\\\\n        --query \\\"services[0].deployments[?taskDefinition==\\\\`$ECS_PARAM_TASK_DEF_ARN\\\\` \u0026\u0026 runningCount == desiredCount \u0026\u0026 (status == \\\\`PRIMARY\\\\` || status == \\\\`ACTIVE\\\\`)][taskDefinition]\\\" \\\\\\n        \\\"$@\\\")\\n    echo \\\"Current deployments: $DEPLOYMENTS\\\"\\n    if [ \\\"$NUM_DEPLOYMENTS\\\" = \\\"1\\\" ] \u0026\u0026 [ \\\"$TARGET_REVISION\\\" = \\\"$ECS_PARAM_TASK_DEF_ARN\\\" ]; then\\n        echo \\\"The task definition revision $TARGET_REVISION is the only deployment for the service and has attained the desired running task count.\\\"\\n        exit 0\\n    else\\n        echo \\\"Waiting for revision $ECS_PARAM_TASK_DEF_ARN to reach desired running count / older revisions to be stopped..\\\"\\n        sleep \\\"$ECS_PARAM_POLL_INTERVAL\\\"\\n    fi\\n    attempt=$((attempt + 1))\\ndone\\n\\necho \\\"Stopped waiting for deployment to be stable - please check the status of $ECS_PARAM_TASK_DEF_ARN on the AWS ECS console.\\\"\\n\\nif [ \\\"$ECS_PARAM_FAIL_ON_VERIFY_TIMEOUT\\\" = \\\"1\\\" ]; then\\n    exit 1\\nfi\\n\\n\"\n        description: |\n          Poll the deployment status at intervals till the given task definition revision has reached its desired running task count and is the only one deployed for the service.\n        environment:\n          ECS_PARAM_CLUSTER_NAME: store_data_hub_fargate_cluster\n          ECS_PARAM_FAIL_ON_VERIFY_TIMEOUT: true\n          ECS_PARAM_FAMILY: store-data-hub-event-processor\n          ECS_PARAM_MAX_POLL_ATTEMPTS: 50\n          ECS_PARAM_POLL_INTERVAL: 20\n          ECS_PARAM_PROFILE_NAME: ''\n          ECS_PARAM_SERVICE_NAME: store-data-hub-event-processor-service\n          ECS_PARAM_TASK_DEF_ARN: $CCI_ORB_AWS_ECS_DEPLOYED_REVISION\n        name: Verify that the revision is deployed and older revisions are stopped\n  Make Live Pre-Prod:\n    docker:\n    - image: cimg/base:stable\n    resource_class: large\n    steps:\n    - run:\n        command: |\n          if cat /etc/issue | grep \"Alpine\" \u003e/dev/null 2\u003e\u00261; then\n              if [ \"$ID\" = 0 ]; then export SUDO=\"\"; else export SUDO=\"sudo\"; fi\n          else\n              if [[ $EUID == 0 ]]; then export SUDO=\"\"; else export SUDO=\"sudo\"; fi\n          fi\n\n          Install_AWS_CLI() {\n              echo \"Installing AWS CLI v2\"\n              cd /tmp || exit\n              # Platform check\n              if uname -a | grep \"Darwin\"; then\n                  export SYS_ENV_PLATFORM=macos\n              elif uname -a | grep \"x86_64 GNU/Linux\"; then\n                  export SYS_ENV_PLATFORM=linux_x86\n              elif uname -a | grep \"aarch64 GNU/Linux\"; then\n                  export SYS_ENV_PLATFORM=linux_arm\n              elif uname -a | grep \"x86_64 Msys\"; then\n                  export SYS_ENV_PLATFORM=windows\n              elif cat /etc/issue | grep \"Alpine\" \u003e/dev/null 2\u003e\u00261; then\n                  export SYS_ENV_PLATFORM=linux_alpine\n              else\n                  echo \"This platform appears to be unsupported.\"\n                  uname -a\n                  exit 1\n              fi\n\n              # Install per platform\n              case $SYS_ENV_PLATFORM in\n              linux_x86)\n                  curl -sSL \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip\" -o \"awscliv2.zip\"\n                  unzip -q -o awscliv2.zip\n                  $SUDO ./aws/install -i \"${PARAM_AWS_CLI_INSTALL_DIR}\" -b \"${PARAM_AWS_CLI_BINARY_DIR}\"\n                  rm -r awscliv2.zip ./aws\n                  ;;\n              windows)\n                  if [ ! \"$(command -v choco)\" ]; then\n                      echo \"Chocolatey is required to uninstall AWS\"\n                      exit 1\n                  fi\n                  choco install awscli --version=\"$1\"\n                  echo \"$1\"\n                  if echo \"$1\" | grep \"2.\"; then\n                      echo 'export PATH=\"${PATH}:/c/Program Files/Amazon/AWSCLIV2\"' \u003e\u003e\"$BASH_ENV\"\n                  else\n                      echo 'export PATH=\"${PATH}:/c/Program Files/Amazon/AWSCLI/bin\"' \u003e\u003e\"$BASH_ENV\"\n                  fi\n                  ;;\n              macos)\n                  curl -sSL \"https://awscli.amazonaws.com/AWSCLIV2$1.pkg\" -o \"AWSCLIV2.pkg\"\n                  $SUDO installer -pkg AWSCLIV2.pkg -target /\n                  rm AWSCLIV2.pkg\n                  ;;\n              linux_arm)\n                  curl -sSL \"https://awscli.amazonaws.com/awscli-exe-linux-aarch64$1.zip\" -o \"awscliv2.zip\"\n                  unzip -q -o awscliv2.zip\n                  $SUDO ./aws/install -i \"${PARAM_AWS_CLI_INSTALL_DIR}\" -b \"${PARAM_AWS_CLI_BINARY_DIR}\"\n                  rm -r awscliv2.zip ./aws\n                  ;;\n              linux_alpine)\n                  apk --no-cache add \\\n                      binutils \\\n                      curl\n\n                  curl -L https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub -o /etc/apk/keys/sgerrand.rsa.pub\n                  curl -LO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-2.34-r0.apk\n                  curl -LO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-bin-2.34-r0.apk\n                  curl -LO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-i18n-2.34-r0.apk\n\n                  apk add --force-overwrite --no-cache \\\n                      glibc-2.34-r0.apk \\\n                      glibc-bin-2.34-r0.apk \\\n                      glibc-i18n-2.34-r0.apk\n\n                  /usr/glibc-compat/bin/localedef -i en_US -f UTF-8 en_US.UTF-8\n                  curl -sSL \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip\" -o \"awscliv2.zip\"\n\n                  echo \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip\"\n                  unzip awscliv2.zip\n                  aws/install\n                  rm -r awscliv2.zip ./aws\n                  ;;\n              *)\n                  echo \"This orb does not currently support your platform. If you believe it should, please consider opening an issue on the GitHub repository:\"\n                  echo \"https://github.com/CircleCI-Public/aws-cli-orb/issues/new\"\n                  exit 1\n                  ;;\n              esac\n              # Toggle AWS Pager\n              if [ \"$PARAM_AWS_CLI_DISABLE_PAGER\" = 1 ]; then\n                  if [ -z \"${AWS_PAGER+x}\" ]; then\n                      echo 'export AWS_PAGER=\"\"' \u003e\u003e\"$BASH_ENV\"\n                      echo \"AWS_PAGER is being set to the empty string to disable all output paging for AWS CLI commands.\"\n                      echo \"You can set the 'disable-aws-pager' parameter to 'false' to disable this behavior.\"\n                  fi\n              fi\n          }\n\n          Uninstall_AWS_CLI() {\n              if uname -a | grep \"x86_64 Msys\"; then\n                  if [ ! \"$(command -v choco)\" ]; then\n                      echo \"Chocolatey is required to uninstall AWS\"\n                      exit 1\n                  fi\n                  choco uninstall awscli\n              else\n                  AWS_CLI_PATH=$(command -v aws)\n                  echo \"$AWS_CLI_PATH\"\n                  if [ -n \"$AWS_CLI_PATH\" ]; then\n                      EXISTING_AWS_VERSION=$(aws --version)\n                      echo \"Uninstalling ${EXISTING_AWS_VERSION}\"\n                      # shellcheck disable=SC2012\n                      if [ -L \"$AWS_CLI_PATH\" ]; then\n                          AWS_SYMLINK_PATH=$(ls -l \"$AWS_CLI_PATH\" | sed -e 's/.* -\u003e //')\n                      fi\n                      if uname -a | grep \"x86_64 Msys\"; then export SUDO=\"\"; fi\n                      $SUDO rm -rf \"$AWS_CLI_PATH\" \"$AWS_SYMLINK_PATH\" \"$HOME/.aws/\" \"/usr/local/bin/aws\" \"/usr/local/bin/aws_completer\" \"/usr/local/aws-cli\"\n                  else\n                      echo \"No AWS install found\"\n                  fi\n              fi\n          }\n\n          if [ ! \"$(command -v aws)\" ]; then\n              if [ \"$PARAM_AWS_CLI_VERSION\" = \"latest\" ]; then\n                  Install_AWS_CLI\n              else\n                  if uname -a | grep \"x86_64 Msys\"; then\n                      Install_AWS_CLI \"${PARAM_AWS_CLI_VERSION}\"\n                  else\n                      Install_AWS_CLI \"-${PARAM_AWS_CLI_VERSION}\"\n                  fi\n              fi\n          elif [ \"$PARAM_AWS_CLI_OVERRIDE\" = 1 ]; then\n              Uninstall_AWS_CLI\n              if uname -a | grep \"x86_64 Msys\"; then\n                  Install_AWS_CLI \"${PARAM_AWS_CLI_VERSION}\"\n              else\n                  Install_AWS_CLI \"-${PARAM_AWS_CLI_VERSION}\"\n              fi\n          else\n              echo \"AWS CLI is already installed, skipping installation.\"\n              aws --version\n          fi\n        environment:\n          PARAM_AWS_CLI_BINARY_DIR: /usr/local/bin\n          PARAM_AWS_CLI_DISABLE_PAGER: true\n          PARAM_AWS_CLI_INSTALL_DIR: /usr/local/aws-cli\n          PARAM_AWS_CLI_OVERRIDE: false\n          PARAM_AWS_CLI_VERSION: latest\n        name: Install AWS CLI - latest\n    - run:\n        command: \"#!/bin/sh\\nif cat /etc/issue | grep \\\"Alpine\\\" \u003e/dev/null 2\u003e\u00261; then\\n    . $BASH_ENV\\nfi\\n\\nPARAM_AWS_CLI_ACCESS_KEY_ID=$(eval echo \\\"\\\\$$PARAM_AWS_CLI_ACCESS_KEY_ID\\\")\\nPARAM_AWS_CLI_SECRET_ACCESS_KEY=$(eval echo \\\"\\\\$$PARAM_AWS_CLI_SECRET_ACCESS_KEY\\\")\\nPARAM_AWS_CLI_REGION=$(eval echo \\\"\\\\$$PARAM_AWS_CLI_REGION\\\")\\n\\nif [ -z \\\"$PARAM_AWS_CLI_ACCESS_KEY_ID\\\" ] || [ -z \\\"${PARAM_AWS_CLI_SECRET_ACCESS_KEY}\\\" ]; then \\n    echo \\\"Cannot configure profile. AWS access key id and AWS secret access key must be provided.\\\"\\n    exit 1\\nfi\\n\\naws configure set aws_access_key_id \\\\\\n    \\\"$PARAM_AWS_CLI_ACCESS_KEY_ID\\\" \\\\\\n    --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\n\\naws configure set aws_secret_access_key \\\\\\n    \\\"$PARAM_AWS_CLI_SECRET_ACCESS_KEY\\\" \\\\\\n    --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\n\\nif [ -n \\\"${AWS_SESSION_TOKEN}\\\" ]; then\\n    aws configure set aws_session_token \\\\\\n        \\\"${AWS_SESSION_TOKEN}\\\" \\\\\\n        --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\nfi\\n\\nif [ \\\"$PARAM_AWS_CLI_CONFIG_DEFAULT_REGION\\\" = \\\"1\\\" ]; then\\n    aws configure set default.region \\\"$PARAM_AWS_CLI_REGION\\\" \\\\\\n        --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\nfi\\n\\nif [ \\\"$PARAM_AWS_CLI_CONFIG_PROFILE_REGION\\\" = \\\"1\\\" ]; then\\n    aws configure set region \\\"$PARAM_AWS_CLI_REGION\\\" \\\\\\n        --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\nfi\\n\"\n        environment:\n          PARAM_AWS_CLI_ACCESS_KEY_ID: AWS_ACCESS_KEY_ID\n          PARAM_AWS_CLI_CONFIG_DEFAULT_REGION: true\n          PARAM_AWS_CLI_CONFIG_PROFILE_REGION: true\n          PARAM_AWS_CLI_PROFILE_NAME: default\n          PARAM_AWS_CLI_REGION: AWS_REGION\n          PARAM_AWS_CLI_SECRET_ACCESS_KEY: AWS_SECRET_ACCESS_KEY\n        name: Configure AWS Access Key ID\n    - restore_cache:\n        keys:\n        - v1_python_install\n        name: Restoring cache Python command\n    - run:\n        command: |\n          if [[ ! -f \"/usr/bin/python\" ]]; then\n            echo \"Installing Python\"\n            sudo apt-get install python\n          else\n            echo \"Python is already installed.\"\n          fi\n        name: Install Python\n    - save_cache:\n        key: v1_python_install\n        name: Saving cache Python command\n        paths:\n        - /usr/bin/python\n    - run:\n        command: |\n          TASK_DEFINITION_ARN=$(aws ecs describe-task-definition \\\n            --task-definition store-data-hub-event-processor \\\n            --output text \\\n            --query 'taskDefinition.taskDefinitionArn' \\\n            --profile=)\n          echo \"export CCI_ORB_AWS_ECS_REGISTERED_TASK_DFN='${TASK_DEFINITION_ARN}'\" \u003e\u003e $BASH_ENV\n        name: Retrieve previous task definition\n    - run:\n        command: \"set -o noglob\\n\\n# These variables are evaluated so the config file may contain and pass in environment variables to the parameters.\\nECS_PARAM_FAMILY=$(eval echo \\\"$ECS_PARAM_FAMILY\\\")\\nECS_PARAM_CLUSTER_NAME=$(eval echo \\\"$ECS_PARAM_CLUSTER_NAME\\\")\\nECS_PARAM_SERVICE_NAME=$(eval echo \\\"$ECS_PARAM_SERVICE_NAME\\\")\\nECS_PARAM_PROFILE_NAME=$(eval echo \\\"$ECS_PARAM_PROFILE_NAME\\\")\\n\\nif [ -z \\\"${ECS_PARAM_SERVICE_NAME}\\\" ]; then\\n    ECS_PARAM_SERVICE_NAME=\\\"$ECS_PARAM_FAMILY\\\"\\nfi\\n\\nif [ \\\"$ECS_PARAM_FORCE_NEW_DEPLOY\\\" == \\\"1\\\" ]; then\\n    set -- \\\"$@\\\" --force-new-deployment\\nfi\\n\\nif [ -n \\\"${ECS_PARAM_PROFILE_NAME}\\\" ]; then\\n    set -- \\\"$@\\\" --profile \\\"${ECS_PARAM_PROFILE_NAME}\\\"   \\nfi\\n\\nif [ \\\"$ECS_PARAM_ENABLE_CIRCUIT_BREAKER\\\" == \\\"1\\\" ]; then\\n    set -- \\\"$@\\\" --deployment-configuration \\\"deploymentCircuitBreaker={enable=true,rollback=true}\\\"\\nfi\\n\\nDEPLOYED_REVISION=$(aws ecs update-service \\\\\\n    --cluster \\\"$ECS_PARAM_CLUSTER_NAME\\\" \\\\\\n    --service \\\"${ECS_PARAM_SERVICE_NAME}\\\" \\\\\\n    --task-definition \\\"${CCI_ORB_AWS_ECS_REGISTERED_TASK_DFN}\\\" \\\\\\n    --output text \\\\\\n    --query service.taskDefinition \\\\\\n    \\\"$@\\\")\\necho \\\"export CCI_ORB_AWS_ECS_DEPLOYED_REVISION='${DEPLOYED_REVISION}'\\\" \u003e\u003e \\\"$BASH_ENV\\\"\\n\"\n        environment:\n          ECS_PARAM_CLUSTER_NAME: store_data_hub_fargate_cluster\n          ECS_PARAM_ENABLE_CIRCUIT_BREAKER: false\n          ECS_PARAM_FAMILY: store-data-hub-event-processor\n          ECS_PARAM_FORCE_NEW_DEPLOY: true\n          ECS_PARAM_PROFILE_NAME: ''\n          ECS_PARAM_SERVICE_NAME: store-data-hub-event-processor-service\n        name: Update service with registered task definition\n    - run:\n        command: \"# These variables are evaluated so the config file may contain and pass in environment variables to the parameters.\\nECS_PARAM_FAMILY=$(eval echo \\\"$ECS_PARAM_FAMILY\\\")\\nECS_PARAM_SERVICE_NAME=$(eval echo \\\"$ECS_PARAM_SERVICE_NAME\\\")\\nECS_PARAM_CLUSTER_NAME=$(eval echo \\\"$ECS_PARAM_CLUSTER_NAME\\\")\\nECS_PARAM_TASK_DEF_ARN=$(eval echo \\\"$ECS_PARAM_TASK_DEF_ARN\\\")\\nECS_PARAM_PROFILE_NAME=$(eval echo \\\"$ECS_PARAM_PROFILE_NAME\\\")\\n\\nif [ \\\"$ECS_PARAM_TASK_DEF_ARN\\\" = \\\"\\\" ]; then\\n    echo \\\"Invalid task-definition-arn parameter value: $ECS_PARAM_TASK_DEF_ARN\\\"\\n    exit 1\\nfi\\n\\n\\nif [ -z \\\"${ECS_PARAM_SERVICE_NAME}\\\" ]; then\\n    ECS_PARAM_SERVICE_NAME=\\\"$ECS_PARAM_FAMILY\\\"\\nfi\\n\\necho \\\"Verifying that $ECS_PARAM_TASK_DEF_ARN is deployed..\\\"\\n\\nattempt=0\\n\\nwhile [ \\\"$attempt\\\" -lt \\\"$ECS_PARAM_MAX_POLL_ATTEMPTS\\\" ]\\n\\ndo  \\n    if [ -n \\\"${ECS_PARAM_PROFILE_NAME}\\\" ]; then\\n        set -- \\\"$@\\\" --profile=\\\"${ECS_PARAM_PROFILE_NAME}\\\"   \\n    fi\\n\\n    DEPLOYMENTS=$(aws ecs describe-services \\\\\\n        --cluster \\\"$ECS_PARAM_CLUSTER_NAME\\\" \\\\\\n        --services \\\"${ECS_PARAM_SERVICE_NAME}\\\" \\\\\\n        --output text \\\\\\n        --query 'services[0].deployments[].[taskDefinition, status]' \\\\\\n        \\\"$@\\\")\\n    NUM_DEPLOYMENTS=$(aws ecs describe-services \\\\\\n        --cluster \\\"$ECS_PARAM_CLUSTER_NAME\\\" \\\\\\n        --services \\\"${ECS_PARAM_SERVICE_NAME}\\\" \\\\\\n        --output text \\\\\\n        --query 'length(services[0].deployments)' \\\\\\n        \\\"$@\\\")\\n    TARGET_REVISION=$(aws ecs describe-services \\\\\\n        --cluster \\\"$ECS_PARAM_CLUSTER_NAME\\\" \\\\\\n        --services \\\"${ECS_PARAM_SERVICE_NAME}\\\" \\\\\\n        --output text \\\\\\n        --query \\\"services[0].deployments[?taskDefinition==\\\\`$ECS_PARAM_TASK_DEF_ARN\\\\` \u0026\u0026 runningCount == desiredCount \u0026\u0026 (status == \\\\`PRIMARY\\\\` || status == \\\\`ACTIVE\\\\`)][taskDefinition]\\\" \\\\\\n        \\\"$@\\\")\\n    echo \\\"Current deployments: $DEPLOYMENTS\\\"\\n    if [ \\\"$NUM_DEPLOYMENTS\\\" = \\\"1\\\" ] \u0026\u0026 [ \\\"$TARGET_REVISION\\\" = \\\"$ECS_PARAM_TASK_DEF_ARN\\\" ]; then\\n        echo \\\"The task definition revision $TARGET_REVISION is the only deployment for the service and has attained the desired running task count.\\\"\\n        exit 0\\n    else\\n        echo \\\"Waiting for revision $ECS_PARAM_TASK_DEF_ARN to reach desired running count / older revisions to be stopped..\\\"\\n        sleep \\\"$ECS_PARAM_POLL_INTERVAL\\\"\\n    fi\\n    attempt=$((attempt + 1))\\ndone\\n\\necho \\\"Stopped waiting for deployment to be stable - please check the status of $ECS_PARAM_TASK_DEF_ARN on the AWS ECS console.\\\"\\n\\nif [ \\\"$ECS_PARAM_FAIL_ON_VERIFY_TIMEOUT\\\" = \\\"1\\\" ]; then\\n    exit 1\\nfi\\n\\n\"\n        description: |\n          Poll the deployment status at intervals till the given task definition revision has reached its desired running task count and is the only one deployed for the service.\n        environment:\n          ECS_PARAM_CLUSTER_NAME: store_data_hub_fargate_cluster\n          ECS_PARAM_FAIL_ON_VERIFY_TIMEOUT: true\n          ECS_PARAM_FAMILY: store-data-hub-event-processor\n          ECS_PARAM_MAX_POLL_ATTEMPTS: 50\n          ECS_PARAM_POLL_INTERVAL: 20\n          ECS_PARAM_PROFILE_NAME: ''\n          ECS_PARAM_SERVICE_NAME: store-data-hub-event-processor-service\n          ECS_PARAM_TASK_DEF_ARN: $CCI_ORB_AWS_ECS_DEPLOYED_REVISION\n        name: Verify that the revision is deployed and older revisions are stopped\n  Build Prod:\n    docker:\n    - image: amazoncorretto:17-alpine3.17-jdk\n    resource_class: large\n    steps:\n    - attach_workspace:\n        at: .\n    - run:\n        command: |\n          ./gradlew build -x test -Dquarkus.profile=prod\n        name: Build\n    - persist_to_workspace:\n        paths:\n        - .\n        root: .\n  Make Live Prod:\n    docker:\n    - image: cimg/base:stable\n    resource_class: large\n    steps:\n    - run:\n        command: |\n          if cat /etc/issue | grep \"Alpine\" \u003e/dev/null 2\u003e\u00261; then\n              if [ \"$ID\" = 0 ]; then export SUDO=\"\"; else export SUDO=\"sudo\"; fi\n          else\n              if [[ $EUID == 0 ]]; then export SUDO=\"\"; else export SUDO=\"sudo\"; fi\n          fi\n\n          Install_AWS_CLI() {\n              echo \"Installing AWS CLI v2\"\n              cd /tmp || exit\n              # Platform check\n              if uname -a | grep \"Darwin\"; then\n                  export SYS_ENV_PLATFORM=macos\n              elif uname -a | grep \"x86_64 GNU/Linux\"; then\n                  export SYS_ENV_PLATFORM=linux_x86\n              elif uname -a | grep \"aarch64 GNU/Linux\"; then\n                  export SYS_ENV_PLATFORM=linux_arm\n              elif uname -a | grep \"x86_64 Msys\"; then\n                  export SYS_ENV_PLATFORM=windows\n              elif cat /etc/issue | grep \"Alpine\" \u003e/dev/null 2\u003e\u00261; then\n                  export SYS_ENV_PLATFORM=linux_alpine\n              else\n                  echo \"This platform appears to be unsupported.\"\n                  uname -a\n                  exit 1\n              fi\n\n              # Install per platform\n              case $SYS_ENV_PLATFORM in\n              linux_x86)\n                  curl -sSL \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip\" -o \"awscliv2.zip\"\n                  unzip -q -o awscliv2.zip\n                  $SUDO ./aws/install -i \"${PARAM_AWS_CLI_INSTALL_DIR}\" -b \"${PARAM_AWS_CLI_BINARY_DIR}\"\n                  rm -r awscliv2.zip ./aws\n                  ;;\n              windows)\n                  if [ ! \"$(command -v choco)\" ]; then\n                      echo \"Chocolatey is required to uninstall AWS\"\n                      exit 1\n                  fi\n                  choco install awscli --version=\"$1\"\n                  echo \"$1\"\n                  if echo \"$1\" | grep \"2.\"; then\n                      echo 'export PATH=\"${PATH}:/c/Program Files/Amazon/AWSCLIV2\"' \u003e\u003e\"$BASH_ENV\"\n                  else\n                      echo 'export PATH=\"${PATH}:/c/Program Files/Amazon/AWSCLI/bin\"' \u003e\u003e\"$BASH_ENV\"\n                  fi\n                  ;;\n              macos)\n                  curl -sSL \"https://awscli.amazonaws.com/AWSCLIV2$1.pkg\" -o \"AWSCLIV2.pkg\"\n                  $SUDO installer -pkg AWSCLIV2.pkg -target /\n                  rm AWSCLIV2.pkg\n                  ;;\n              linux_arm)\n                  curl -sSL \"https://awscli.amazonaws.com/awscli-exe-linux-aarch64$1.zip\" -o \"awscliv2.zip\"\n                  unzip -q -o awscliv2.zip\n                  $SUDO ./aws/install -i \"${PARAM_AWS_CLI_INSTALL_DIR}\" -b \"${PARAM_AWS_CLI_BINARY_DIR}\"\n                  rm -r awscliv2.zip ./aws\n                  ;;\n              linux_alpine)\n                  apk --no-cache add \\\n                      binutils \\\n                      curl\n\n                  curl -L https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub -o /etc/apk/keys/sgerrand.rsa.pub\n                  curl -LO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-2.34-r0.apk\n                  curl -LO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-bin-2.34-r0.apk\n                  curl -LO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-i18n-2.34-r0.apk\n\n                  apk add --force-overwrite --no-cache \\\n                      glibc-2.34-r0.apk \\\n                      glibc-bin-2.34-r0.apk \\\n                      glibc-i18n-2.34-r0.apk\n\n                  /usr/glibc-compat/bin/localedef -i en_US -f UTF-8 en_US.UTF-8\n                  curl -sSL \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip\" -o \"awscliv2.zip\"\n\n                  echo \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip\"\n                  unzip awscliv2.zip\n                  aws/install\n                  rm -r awscliv2.zip ./aws\n                  ;;\n              *)\n                  echo \"This orb does not currently support your platform. If you believe it should, please consider opening an issue on the GitHub repository:\"\n                  echo \"https://github.com/CircleCI-Public/aws-cli-orb/issues/new\"\n                  exit 1\n                  ;;\n              esac\n              # Toggle AWS Pager\n              if [ \"$PARAM_AWS_CLI_DISABLE_PAGER\" = 1 ]; then\n                  if [ -z \"${AWS_PAGER+x}\" ]; then\n                      echo 'export AWS_PAGER=\"\"' \u003e\u003e\"$BASH_ENV\"\n                      echo \"AWS_PAGER is being set to the empty string to disable all output paging for AWS CLI commands.\"\n                      echo \"You can set the 'disable-aws-pager' parameter to 'false' to disable this behavior.\"\n                  fi\n              fi\n          }\n\n          Uninstall_AWS_CLI() {\n              if uname -a | grep \"x86_64 Msys\"; then\n                  if [ ! \"$(command -v choco)\" ]; then\n                      echo \"Chocolatey is required to uninstall AWS\"\n                      exit 1\n                  fi\n                  choco uninstall awscli\n              else\n                  AWS_CLI_PATH=$(command -v aws)\n                  echo \"$AWS_CLI_PATH\"\n                  if [ -n \"$AWS_CLI_PATH\" ]; then\n                      EXISTING_AWS_VERSION=$(aws --version)\n                      echo \"Uninstalling ${EXISTING_AWS_VERSION}\"\n                      # shellcheck disable=SC2012\n                      if [ -L \"$AWS_CLI_PATH\" ]; then\n                          AWS_SYMLINK_PATH=$(ls -l \"$AWS_CLI_PATH\" | sed -e 's/.* -\u003e //')\n                      fi\n                      if uname -a | grep \"x86_64 Msys\"; then export SUDO=\"\"; fi\n                      $SUDO rm -rf \"$AWS_CLI_PATH\" \"$AWS_SYMLINK_PATH\" \"$HOME/.aws/\" \"/usr/local/bin/aws\" \"/usr/local/bin/aws_completer\" \"/usr/local/aws-cli\"\n                  else\n                      echo \"No AWS install found\"\n                  fi\n              fi\n          }\n\n          if [ ! \"$(command -v aws)\" ]; then\n              if [ \"$PARAM_AWS_CLI_VERSION\" = \"latest\" ]; then\n                  Install_AWS_CLI\n              else\n                  if uname -a | grep \"x86_64 Msys\"; then\n                      Install_AWS_CLI \"${PARAM_AWS_CLI_VERSION}\"\n                  else\n                      Install_AWS_CLI \"-${PARAM_AWS_CLI_VERSION}\"\n                  fi\n              fi\n          elif [ \"$PARAM_AWS_CLI_OVERRIDE\" = 1 ]; then\n              Uninstall_AWS_CLI\n              if uname -a | grep \"x86_64 Msys\"; then\n                  Install_AWS_CLI \"${PARAM_AWS_CLI_VERSION}\"\n              else\n                  Install_AWS_CLI \"-${PARAM_AWS_CLI_VERSION}\"\n              fi\n          else\n              echo \"AWS CLI is already installed, skipping installation.\"\n              aws --version\n          fi\n        environment:\n          PARAM_AWS_CLI_BINARY_DIR: /usr/local/bin\n          PARAM_AWS_CLI_DISABLE_PAGER: true\n          PARAM_AWS_CLI_INSTALL_DIR: /usr/local/aws-cli\n          PARAM_AWS_CLI_OVERRIDE: false\n          PARAM_AWS_CLI_VERSION: latest\n        name: Install AWS CLI - latest\n    - run:\n        command: \"#!/bin/sh\\nif cat /etc/issue | grep \\\"Alpine\\\" \u003e/dev/null 2\u003e\u00261; then\\n    . $BASH_ENV\\nfi\\n\\nPARAM_AWS_CLI_ACCESS_KEY_ID=$(eval echo \\\"\\\\$$PARAM_AWS_CLI_ACCESS_KEY_ID\\\")\\nPARAM_AWS_CLI_SECRET_ACCESS_KEY=$(eval echo \\\"\\\\$$PARAM_AWS_CLI_SECRET_ACCESS_KEY\\\")\\nPARAM_AWS_CLI_REGION=$(eval echo \\\"\\\\$$PARAM_AWS_CLI_REGION\\\")\\n\\nif [ -z \\\"$PARAM_AWS_CLI_ACCESS_KEY_ID\\\" ] || [ -z \\\"${PARAM_AWS_CLI_SECRET_ACCESS_KEY}\\\" ]; then \\n    echo \\\"Cannot configure profile. AWS access key id and AWS secret access key must be provided.\\\"\\n    exit 1\\nfi\\n\\naws configure set aws_access_key_id \\\\\\n    \\\"$PARAM_AWS_CLI_ACCESS_KEY_ID\\\" \\\\\\n    --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\n\\naws configure set aws_secret_access_key \\\\\\n    \\\"$PARAM_AWS_CLI_SECRET_ACCESS_KEY\\\" \\\\\\n    --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\n\\nif [ -n \\\"${AWS_SESSION_TOKEN}\\\" ]; then\\n    aws configure set aws_session_token \\\\\\n        \\\"${AWS_SESSION_TOKEN}\\\" \\\\\\n        --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\nfi\\n\\nif [ \\\"$PARAM_AWS_CLI_CONFIG_DEFAULT_REGION\\\" = \\\"1\\\" ]; then\\n    aws configure set default.region \\\"$PARAM_AWS_CLI_REGION\\\" \\\\\\n        --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\nfi\\n\\nif [ \\\"$PARAM_AWS_CLI_CONFIG_PROFILE_REGION\\\" = \\\"1\\\" ]; then\\n    aws configure set region \\\"$PARAM_AWS_CLI_REGION\\\" \\\\\\n        --profile \\\"$PARAM_AWS_CLI_PROFILE_NAME\\\"\\nfi\\n\"\n        environment:\n          PARAM_AWS_CLI_ACCESS_KEY_ID: AWS_ACCESS_KEY_ID\n          PARAM_AWS_CLI_CONFIG_DEFAULT_REGION: true\n          PARAM_AWS_CLI_CONFIG_PROFILE_REGION: true\n          PARAM_AWS_CLI_PROFILE_NAME: default\n          PARAM_AWS_CLI_REGION: AWS_REGION\n          PARAM_AWS_CLI_SECRET_ACCESS_KEY: AWS_SECRET_ACCESS_KEY\n        name: Configure AWS Access Key ID\n    - restore_cache:\n        keys:\n        - v1_python_install\n        name: Restoring cache Python command\n    - run:\n        command: |\n          if [[ ! -f \"/usr/bin/python\" ]]; then\n            echo \"Installing Python\"\n            sudo apt-get install python\n          else\n            echo \"Python is already installed.\"\n          fi\n        name: Install Python\n    - save_cache:\n        key: v1_python_install\n        name: Saving cache Python command\n        paths:\n        - /usr/bin/python\n    - run:\n        command: |\n          TASK_DEFINITION_ARN=$(aws ecs describe-task-definition \\\n            --task-definition store-data-hub-event-processor \\\n            --output text \\\n            --query 'taskDefinition.taskDefinitionArn' \\\n            --profile=)\n          echo \"export CCI_ORB_AWS_ECS_REGISTERED_TASK_DFN='${TASK_DEFINITION_ARN}'\" \u003e\u003e $BASH_ENV\n        name: Retrieve previous task definition\n    - run:\n        command: \"set -o noglob\\n\\n# These variables are evaluated so the config file may contain and pass in environment variables to the parameters.\\nECS_PARAM_FAMILY=$(eval echo \\\"$ECS_PARAM_FAMILY\\\")\\nECS_PARAM_CLUSTER_NAME=$(eval echo \\\"$ECS_PARAM_CLUSTER_NAME\\\")\\nECS_PARAM_SERVICE_NAME=$(eval echo \\\"$ECS_PARAM_SERVICE_NAME\\\")\\nECS_PARAM_PROFILE_NAME=$(eval echo \\\"$ECS_PARAM_PROFILE_NAME\\\")\\n\\nif [ -z \\\"${ECS_PARAM_SERVICE_NAME}\\\" ]; then\\n    ECS_PARAM_SERVICE_NAME=\\\"$ECS_PARAM_FAMILY\\\"\\nfi\\n\\nif [ \\\"$ECS_PARAM_FORCE_NEW_DEPLOY\\\" == \\\"1\\\" ]; then\\n    set -- \\\"$@\\\" --force-new-deployment\\nfi\\n\\nif [ -n \\\"${ECS_PARAM_PROFILE_NAME}\\\" ]; then\\n    set -- \\\"$@\\\" --profile \\\"${ECS_PARAM_PROFILE_NAME}\\\"   \\nfi\\n\\nif [ \\\"$ECS_PARAM_ENABLE_CIRCUIT_BREAKER\\\" == \\\"1\\\" ]; then\\n    set -- \\\"$@\\\" --deployment-configuration \\\"deploymentCircuitBreaker={enable=true,rollback=true}\\\"\\nfi\\n\\nDEPLOYED_REVISION=$(aws ecs update-service \\\\\\n    --cluster \\\"$ECS_PARAM_CLUSTER_NAME\\\" \\\\\\n    --service \\\"${ECS_PARAM_SERVICE_NAME}\\\" \\\\\\n    --task-definition \\\"${CCI_ORB_AWS_ECS_REGISTERED_TASK_DFN}\\\" \\\\\\n    --output text \\\\\\n    --query service.taskDefinition \\\\\\n    \\\"$@\\\")\\necho \\\"export CCI_ORB_AWS_ECS_DEPLOYED_REVISION='${DEPLOYED_REVISION}'\\\" \u003e\u003e \\\"$BASH_ENV\\\"\\n\"\n        environment:\n          ECS_PARAM_CLUSTER_NAME: store_data_hub_fargate_cluster\n          ECS_PARAM_ENABLE_CIRCUIT_BREAKER: false\n          ECS_PARAM_FAMILY: store-data-hub-event-processor\n          ECS_PARAM_FORCE_NEW_DEPLOY: true\n          ECS_PARAM_PROFILE_NAME: ''\n          ECS_PARAM_SERVICE_NAME: store-data-hub-event-processor-service\n        name: Update service with registered task definition\n    - run:\n        command: \"# These variables are evaluated so the config file may contain and pass in environment variables to the parameters.\\nECS_PARAM_FAMILY=$(eval echo \\\"$ECS_PARAM_FAMILY\\\")\\nECS_PARAM_SERVICE_NAME=$(eval echo \\\"$ECS_PARAM_SERVICE_NAME\\\")\\nECS_PARAM_CLUSTER_NAME=$(eval echo \\\"$ECS_PARAM_CLUSTER_NAME\\\")\\nECS_PARAM_TASK_DEF_ARN=$(eval echo \\\"$ECS_PARAM_TASK_DEF_ARN\\\")\\nECS_PARAM_PROFILE_NAME=$(eval echo \\\"$ECS_PARAM_PROFILE_NAME\\\")\\n\\nif [ \\\"$ECS_PARAM_TASK_DEF_ARN\\\" = \\\"\\\" ]; then\\n    echo \\\"Invalid task-definition-arn parameter value: $ECS_PARAM_TASK_DEF_ARN\\\"\\n    exit 1\\nfi\\n\\n\\nif [ -z \\\"${ECS_PARAM_SERVICE_NAME}\\\" ]; then\\n    ECS_PARAM_SERVICE_NAME=\\\"$ECS_PARAM_FAMILY\\\"\\nfi\\n\\necho \\\"Verifying that $ECS_PARAM_TASK_DEF_ARN is deployed..\\\"\\n\\nattempt=0\\n\\nwhile [ \\\"$attempt\\\" -lt \\\"$ECS_PARAM_MAX_POLL_ATTEMPTS\\\" ]\\n\\ndo  \\n    if [ -n \\\"${ECS_PARAM_PROFILE_NAME}\\\" ]; then\\n        set -- \\\"$@\\\" --profile=\\\"${ECS_PARAM_PROFILE_NAME}\\\"   \\n    fi\\n\\n    DEPLOYMENTS=$(aws ecs describe-services \\\\\\n        --cluster \\\"$ECS_PARAM_CLUSTER_NAME\\\" \\\\\\n        --services \\\"${ECS_PARAM_SERVICE_NAME}\\\" \\\\\\n        --output text \\\\\\n        --query 'services[0].deployments[].[taskDefinition, status]' \\\\\\n        \\\"$@\\\")\\n    NUM_DEPLOYMENTS=$(aws ecs describe-services \\\\\\n        --cluster \\\"$ECS_PARAM_CLUSTER_NAME\\\" \\\\\\n        --services \\\"${ECS_PARAM_SERVICE_NAME}\\\" \\\\\\n        --output text \\\\\\n        --query 'length(services[0].deployments)' \\\\\\n        \\\"$@\\\")\\n    TARGET_REVISION=$(aws ecs describe-services \\\\\\n        --cluster \\\"$ECS_PARAM_CLUSTER_NAME\\\" \\\\\\n        --services \\\"${ECS_PARAM_SERVICE_NAME}\\\" \\\\\\n        --output text \\\\\\n        --query \\\"services[0].deployments[?taskDefinition==\\\\`$ECS_PARAM_TASK_DEF_ARN\\\\` \u0026\u0026 runningCount == desiredCount \u0026\u0026 (status == \\\\`PRIMARY\\\\` || status == \\\\`ACTIVE\\\\`)][taskDefinition]\\\" \\\\\\n        \\\"$@\\\")\\n    echo \\\"Current deployments: $DEPLOYMENTS\\\"\\n    if [ \\\"$NUM_DEPLOYMENTS\\\" = \\\"1\\\" ] \u0026\u0026 [ \\\"$TARGET_REVISION\\\" = \\\"$ECS_PARAM_TASK_DEF_ARN\\\" ]; then\\n        echo \\\"The task definition revision $TARGET_REVISION is the only deployment for the service and has attained the desired running task count.\\\"\\n        exit 0\\n    else\\n        echo \\\"Waiting for revision $ECS_PARAM_TASK_DEF_ARN to reach desired running count / older revisions to be stopped..\\\"\\n        sleep \\\"$ECS_PARAM_POLL_INTERVAL\\\"\\n    fi\\n    attempt=$((attempt + 1))\\ndone\\n\\necho \\\"Stopped waiting for deployment to be stable - please check the status of $ECS_PARAM_TASK_DEF_ARN on the AWS ECS console.\\\"\\n\\nif [ \\\"$ECS_PARAM_FAIL_ON_VERIFY_TIMEOUT\\\" = \\\"1\\\" ]; then\\n    exit 1\\nfi\\n\\n\"\n        description: |\n          Poll the deployment status at intervals till the given task definition revision has reached its desired running task count and is the only one deployed for the service.\n        environment:\n          ECS_PARAM_CLUSTER_NAME: store_data_hub_fargate_cluster\n          ECS_PARAM_FAIL_ON_VERIFY_TIMEOUT: true\n          ECS_PARAM_FAMILY: store-data-hub-event-processor\n          ECS_PARAM_MAX_POLL_ATTEMPTS: 50\n          ECS_PARAM_POLL_INTERVAL: 20\n          ECS_PARAM_PROFILE_NAME: ''\n          ECS_PARAM_SERVICE_NAME: store-data-hub-event-processor-service\n          ECS_PARAM_TASK_DEF_ARN: $CCI_ORB_AWS_ECS_DEPLOYED_REVISION\n        name: Verify that the revision is deployed and older revisions are stopped\nworkflows:\n  Main workflow:\n    jobs:\n    - Clone\n    - Build and Test Dev:\n        requires:\n        - Clone\n        context: di_shared\n    - Build and Publish Dev:\n        filters:\n          branches:\n            only:\n            - main\n        requires:\n        - Build and Test Dev\n        context: domain_services_store_data_hub_dev\n    - Make Live Dev:\n        filters:\n          branches:\n            only:\n            - main\n        requires:\n        - Build and Publish Dev\n        context: domain_services_store_data_hub_dev\n    - Build Test:\n        filters:\n          branches:\n            only:\n            - main\n        requires:\n        - Build and Test Dev\n        context: di_shared\n    - Approve For Test Env:\n        filters:\n          branches:\n            only:\n            - main\n        type: approval\n        requires:\n        - Make Live Dev\n        - Build Test\n    - Build and Publish Test:\n        filters:\n          branches:\n            only:\n            - main\n        requires:\n        - Approve For Test Env\n        context: domain_services_store_data_hub_test\n    - Make Live Test:\n        filters:\n          branches:\n            only:\n            - main\n        requires:\n        - Build and Publish Test\n        context: domain_services_store_data_hub_test\n    - Build Pre-Prod:\n        filters:\n          branches:\n            only:\n            - main\n        requires:\n        - Build Test\n        context: di_shared\n    - Approve For Pre-Prod Env:\n        filters:\n          branches:\n            only:\n            - main\n        type: approval\n        requires:\n        - Build Pre-Prod\n        - Approve For Test Env\n    - Build and Publish Pre-Prod:\n        filters:\n          branches:\n            only:\n            - main\n        requires:\n        - Approve For Pre-Prod Env\n        context: domain_services_store_data_hub_preprod\n    - Make Live Pre-Prod:\n        filters:\n          branches:\n            only:\n            - main\n        requires:\n        - Build and Publish Pre-Prod\n        context: domain_services_store_data_hub_preprod\n    - Build Prod:\n        filters:\n          branches:\n            only:\n            - main\n        requires:\n        - Build Pre-Prod\n        context: di_shared\n    - Approve For Prod Env:\n        filters:\n          branches:\n            only:\n            - main\n        type: approval\n        requires:\n        - Build Prod\n        - Approve For Pre-Prod Env\n    - Build and Publish Prod:\n        filters:\n          branches:\n            only:\n            - main\n        requires:\n        - Approve For Prod Env\n        context: domain_services_store_data_hub_prod\n    - Make Live Prod:\n        filters:\n          branches:\n            only:\n            - main\n        requires:\n        - Build and Publish Prod\n        context: domain_services_store_data_hub_prod\n  version: 2\n"
    },
    "committer_date": null,
    "committer_email": null,
    "committer_name": null,
    "compare": null,
    "context_ids": [
        "domain_services_store_data_hub_preprod"
    ],
    "dont_build": null,
    "fail_reason": null,
    "failed": false,
    "infrastructure_fail": false,
    "is_first_green_build": false,
    "job_name": null,
    "lifecycle": "finished",
    "messages": [],
    "node": null,
    "oss": false,
    "outcome": "success",
    "owners": [],
    "parallel": 1,
    "picard": {
        "executor": "remotedocker",
        "resource_class": {
            "class": "large",
            "name": "Large",
            "cpu": 4,
            "ram": 15360
        }
    },
    "platform": "2.0",
    "previous": {
        "build_num": 248,
        "build_time_millis": 36735,
        "status": "success"
    },
    "previous_successful_build": {
        "build_num": 243,
        "build_time_millis": 184419,
        "status": "success"
    },
    "pull_requests": [],
    "queued_at": "2024-03-06T19:51:17.08Z",
    "reponame": "pos-reporting-event-processor",
    "retries": null,
    "retry_of": null,
    "ssh_disabled": true,
    "ssh_users": [],
    "start_time": "2024-03-06T19:51:40.985Z",
    "status": "success",
    "steps": [
        {
            "name": "Spin up environment",
            "actions": [
                {
                    "index": 0,
                    "step": 0,
                    "allocation_id": "65e8c934cde7146e8d7e2c72-0-build/ABCDEFGH",
                    "name": "Spin up environment",
                    "type": "test",
                    "start_time": "2024-03-06T19:51:17.345Z",
                    "truncated": false,
                    "parallel": true,
                    "bash_command": null,
                    "background": false,
                    "insignificant": false,
                    "has_output": true,
                    "continue": null,
                    "end_time": "2024-03-06T19:51:22.535Z",
                    "exit_code": null,
                    "run_time_millis": 5190,
                    "output_url": "https://circleci.com/api/private/output/presigned/26ca1ef5-a60b-4389-a500-4f8688251fd8/0/0?token=eyJhbGciOiJFUzI1NiIsImtpZCI6InRhc2tzLW91dHB1dC1qd3QtdjEiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDk3ODk4ODEsImlzcyI6ImNpcmNsZWNpLmNvbSIsInN1YiI6IjI2Y2ExZWY1LWE2MGItNDM4OS1hNTAwLTRmODY4ODI1MWZkOCJ9.ZkDOa7C7uNCmlvutn3IZUZJVtN3_6k3F6ODafOHxld3GH_-UARWIL7zjGNhjkfbtwld_gSzxBTVD_-lghuAM5w",
                    "status": "success",
                    "failed": null,
                    "infrastructure_fail": null,
                    "timedout": null,
                    "canceled": null
                }
            ]
        },
        {
            "name": "Spin up container environment",
            "actions": [
                {
                    "index": 0,
                    "step": 1,
                    "allocation_id": "65e8c934cde7146e8d7e2c72-0-build/ABCDEFGH",
                    "name": "Spin up container environment",
                    "type": "test",
                    "start_time": "2024-03-06T19:51:22.657Z",
                    "truncated": false,
                    "parallel": true,
                    "bash_command": null,
                    "background": false,
                    "insignificant": false,
                    "has_output": true,
                    "continue": null,
                    "end_time": "2024-03-06T19:51:40.759Z",
                    "exit_code": null,
                    "run_time_millis": 18102,
                    "output_url": "https://circleci.com/api/private/output/presigned/26ca1ef5-a60b-4389-a500-4f8688251fd8/0/1?token=eyJhbGciOiJFUzI1NiIsImtpZCI6InRhc2tzLW91dHB1dC1qd3QtdjEiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDk3ODk4ODEsImlzcyI6ImNpcmNsZWNpLmNvbSIsInN1YiI6IjI2Y2ExZWY1LWE2MGItNDM4OS1hNTAwLTRmODY4ODI1MWZkOCJ9.ZkDOa7C7uNCmlvutn3IZUZJVtN3_6k3F6ODafOHxld3GH_-UARWIL7zjGNhjkfbtwld_gSzxBTVD_-lghuAM5w",
                    "status": "success",
                    "failed": null,
                    "infrastructure_fail": null,
                    "timedout": null,
                    "canceled": null
                }
            ]
        },
        {
            "name": "Preparing environment variables",
            "actions": [
                {
                    "index": 0,
                    "step": 99,
                    "allocation_id": "65e8c934cde7146e8d7e2c72-0-build/ABCDEFGH",
                    "name": "Preparing environment variables",
                    "type": "test",
                    "start_time": "2024-03-06T19:51:41.434Z",
                    "truncated": false,
                    "parallel": true,
                    "bash_command": null,
                    "background": false,
                    "insignificant": false,
                    "has_output": true,
                    "continue": null,
                    "end_time": "2024-03-06T19:51:41.444Z",
                    "exit_code": null,
                    "run_time_millis": 10,
                    "output_url": "https://circleci.com/api/private/output/presigned/26ca1ef5-a60b-4389-a500-4f8688251fd8/0/99?token=eyJhbGciOiJFUzI1NiIsImtpZCI6InRhc2tzLW91dHB1dC1qd3QtdjEiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDk3ODk4ODEsImlzcyI6ImNpcmNsZWNpLmNvbSIsInN1YiI6IjI2Y2ExZWY1LWE2MGItNDM4OS1hNTAwLTRmODY4ODI1MWZkOCJ9.ZkDOa7C7uNCmlvutn3IZUZJVtN3_6k3F6ODafOHxld3GH_-UARWIL7zjGNhjkfbtwld_gSzxBTVD_-lghuAM5w",
                    "status": "success",
                    "failed": null,
                    "infrastructure_fail": null,
                    "timedout": null,
                    "canceled": null
                }
            ]
        },
        {
            "name": "Attaching workspace",
            "actions": [
                {
                    "index": 0,
                    "step": 101,
                    "allocation_id": "65e8c934cde7146e8d7e2c72-0-build/ABCDEFGH",
                    "name": "Attaching workspace",
                    "type": "test",
                    "start_time": "2024-03-06T19:51:41.498Z",
                    "truncated": false,
                    "parallel": true,
                    "bash_command": null,
                    "background": false,
                    "insignificant": false,
                    "has_output": true,
                    "continue": null,
                    "end_time": "2024-03-06T19:51:55.528Z",
                    "exit_code": null,
                    "run_time_millis": 14030,
                    "output_url": "https://circleci.com/api/private/output/presigned/26ca1ef5-a60b-4389-a500-4f8688251fd8/0/101?token=eyJhbGciOiJFUzI1NiIsImtpZCI6InRhc2tzLW91dHB1dC1qd3QtdjEiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDk3ODk4ODEsImlzcyI6ImNpcmNsZWNpLmNvbSIsInN1YiI6IjI2Y2ExZWY1LWE2MGItNDM4OS1hNTAwLTRmODY4ODI1MWZkOCJ9.ZkDOa7C7uNCmlvutn3IZUZJVtN3_6k3F6ODafOHxld3GH_-UARWIL7zjGNhjkfbtwld_gSzxBTVD_-lghuAM5w",
                    "status": "success",
                    "failed": null,
                    "infrastructure_fail": null,
                    "timedout": null,
                    "canceled": null
                }
            ]
        },
        {
            "name": "Setup environment variables",
            "actions": [
                {
                    "index": 0,
                    "step": 102,
                    "allocation_id": "65e8c934cde7146e8d7e2c72-0-build/ABCDEFGH",
                    "name": "Setup environment variables",
                    "type": "test",
                    "start_time": "2024-03-06T19:51:55.577Z",
                    "truncated": false,
                    "parallel": true,
                    "bash_command": "#!/bin/bash -eo pipefail\necho 'export LATEST_TAG=\"${AWS_ECR_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/domain-services/store-data-hub-event-processor:latest\"' \u003e\u003e \"$BASH_ENV\"\necho 'export VERSION_TAG=\"${AWS_ECR_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/domain-services/store-data-hub-event-processor:${CIRCLE_SHA1:0:7}\"' \u003e\u003e \"$BASH_ENV\"\necho 'export DOCKERFILE_PATH=\"src/main/docker/Dockerfile.jvm\"' \u003e\u003e \"$BASH_ENV\"\necho 'export IMAGE_VERSION_ARG=\"${CIRCLE_BRANCH}:$(date +%Y-%m-%dT%H:%M:%S)-${CIRCLE_SHA1:0:7}\"' \u003e\u003e \"$BASH_ENV\"\n",
                    "background": false,
                    "insignificant": false,
                    "has_output": true,
                    "continue": null,
                    "end_time": "2024-03-06T19:51:55.585Z",
                    "exit_code": 0,
                    "run_time_millis": 8,
                    "output_url": "https://circleci.com/api/private/output/presigned/26ca1ef5-a60b-4389-a500-4f8688251fd8/0/102?token=eyJhbGciOiJFUzI1NiIsImtpZCI6InRhc2tzLW91dHB1dC1qd3QtdjEiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDk3ODk4ODEsImlzcyI6ImNpcmNsZWNpLmNvbSIsInN1YiI6IjI2Y2ExZWY1LWE2MGItNDM4OS1hNTAwLTRmODY4ODI1MWZkOCJ9.ZkDOa7C7uNCmlvutn3IZUZJVtN3_6k3F6ODafOHxld3GH_-UARWIL7zjGNhjkfbtwld_gSzxBTVD_-lghuAM5w",
                    "status": "success",
                    "failed": null,
                    "infrastructure_fail": null,
                    "timedout": null,
                    "canceled": null
                }
            ]
        },
        {
            "name": "Setup a remote Docker engine",
            "actions": [
                {
                    "index": 0,
                    "step": 103,
                    "allocation_id": "65e8c934cde7146e8d7e2c72-0-build/ABCDEFGH",
                    "name": "Setup a remote Docker engine",
                    "type": "test",
                    "start_time": "2024-03-06T19:51:55.611Z",
                    "truncated": false,
                    "parallel": true,
                    "bash_command": null,
                    "background": false,
                    "insignificant": false,
                    "has_output": true,
                    "continue": null,
                    "end_time": "2024-03-06T19:51:55.63Z",
                    "exit_code": null,
                    "run_time_millis": 19,
                    "output_url": "https://circleci.com/api/private/output/presigned/26ca1ef5-a60b-4389-a500-4f8688251fd8/0/103?token=eyJhbGciOiJFUzI1NiIsImtpZCI6InRhc2tzLW91dHB1dC1qd3QtdjEiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDk3ODk4ODEsImlzcyI6ImNpcmNsZWNpLmNvbSIsInN1YiI6IjI2Y2ExZWY1LWE2MGItNDM4OS1hNTAwLTRmODY4ODI1MWZkOCJ9.ZkDOa7C7uNCmlvutn3IZUZJVtN3_6k3F6ODafOHxld3GH_-UARWIL7zjGNhjkfbtwld_gSzxBTVD_-lghuAM5w",
                    "status": "success",
                    "failed": null,
                    "infrastructure_fail": null,
                    "timedout": null,
                    "canceled": null
                }
            ]
        },
        {
            "name": "Install AWS CLI - latest",
            "actions": [
                {
                    "index": 0,
                    "step": 104,
                    "allocation_id": "65e8c934cde7146e8d7e2c72-0-build/ABCDEFGH",
                    "name": "Install AWS CLI - latest",
                    "type": "test",
                    "start_time": "2024-03-06T19:51:55.739Z",
                    "truncated": false,
                    "parallel": true,
                    "bash_command": "#!/bin/bash -eo pipefail\nif cat /etc/issue | grep \"Alpine\" \u003e/dev/null 2\u003e\u00261; then\n    if [ \"$ID\" = 0 ]; then export SUDO=\"\"; else export SUDO=\"sudo\"; fi\nelse\n    if [[ $EUID == 0 ]]; then export SUDO=\"\"; else export SUDO=\"sudo\"; fi\nfi\n\nInstall_AWS_CLI() {\n    echo \"Installing AWS CLI v2\"\n    cd /tmp || exit\n    # Platform check\n    if uname -a | grep \"Darwin\"; then\n        export SYS_ENV_PLATFORM=macos\n    elif uname -a | grep \"x86_64 GNU/Linux\"; then\n        export SYS_ENV_PLATFORM=linux_x86\n    elif uname -a | grep \"aarch64 GNU/Linux\"; then\n        export SYS_ENV_PLATFORM=linux_arm\n    elif uname -a | grep \"x86_64 Msys\"; then\n        export SYS_ENV_PLATFORM=windows\n    elif cat /etc/issue | grep \"Alpine\" \u003e/dev/null 2\u003e\u00261; then\n        export SYS_ENV_PLATFORM=linux_alpine\n    else\n        echo \"This platform appears to be unsupported.\"\n        uname -a\n        exit 1\n    fi\n\n    # Install per platform\n    case $SYS_ENV_PLATFORM in\n    linux_x86)\n        curl -sSL \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip\" -o \"awscliv2.zip\"\n        unzip -q -o awscliv2.zip\n        $SUDO ./aws/install -i \"${PARAM_AWS_CLI_INSTALL_DIR}\" -b \"${PARAM_AWS_CLI_BINARY_DIR}\"\n        rm -r awscliv2.zip ./aws\n        ;;\n    windows)\n        if [ ! \"$(command -v choco)\" ]; then\n            echo \"Chocolatey is required to uninstall AWS\"\n            exit 1\n        fi\n        choco install awscli --version=\"$1\"\n        echo \"$1\"\n        if echo \"$1\" | grep \"2.\"; then\n            echo 'export PATH=\"${PATH}:/c/Program Files/Amazon/AWSCLIV2\"' \u003e\u003e\"$BASH_ENV\"\n        else\n            echo 'export PATH=\"${PATH}:/c/Program Files/Amazon/AWSCLI/bin\"' \u003e\u003e\"$BASH_ENV\"\n        fi\n        ;;\n    macos)\n        curl -sSL \"https://awscli.amazonaws.com/AWSCLIV2$1.pkg\" -o \"AWSCLIV2.pkg\"\n        $SUDO installer -pkg AWSCLIV2.pkg -target /\n        rm AWSCLIV2.pkg\n        ;;\n    linux_arm)\n        curl -sSL \"https://awscli.amazonaws.com/awscli-exe-linux-aarch64$1.zip\" -o \"awscliv2.zip\"\n        unzip -q -o awscliv2.zip\n        $SUDO ./aws/install -i \"${PARAM_AWS_CLI_INSTALL_DIR}\" -b \"${PARAM_AWS_CLI_BINARY_DIR}\"\n        rm -r awscliv2.zip ./aws\n        ;;\n    linux_alpine)\n        apk --no-cache add \\\n            binutils \\\n            curl\n\n        curl -L https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub -o /etc/apk/keys/sgerrand.rsa.pub\n        curl -LO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-2.34-r0.apk\n        curl -LO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-bin-2.34-r0.apk\n        curl -LO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-i18n-2.34-r0.apk\n\n        apk add --no-cache \\\n            glibc-2.34-r0.apk \\\n            glibc-bin-2.34-r0.apk \\\n            glibc-i18n-2.34-r0.apk\n\n        /usr/glibc-compat/bin/localedef -i en_US -f UTF-8 en_US.UTF-8\n        curl -sSL \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip\" -o \"awscliv2.zip\"\n\n        echo \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip\"\n        unzip awscliv2.zip\n        aws/install\n        rm -r awscliv2.zip ./aws\n        ;;\n    *)\n        echo \"This orb does not currently support your platform. If you believe it should, please consider opening an issue on the GitHub repository:\"\n        echo \"https://github.com/CircleCI-Public/aws-cli-orb/issues/new\"\n        exit 1\n        ;;\n    esac\n    # Toggle AWS Pager\n    if [ \"$PARAM_AWS_CLI_DISABLE_PAGER\" = 1 ]; then\n        if [ -z \"${AWS_PAGER+x}\" ]; then\n            echo 'export AWS_PAGER=\"\"' \u003e\u003e\"$BASH_ENV\"\n            echo \"AWS_PAGER is being set to the empty string to disable all output paging for AWS CLI commands.\"\n            echo \"You can set the 'disable-aws-pager' parameter to 'false' to disable this behavior.\"\n        fi\n    fi\n}\n\nUninstall_AWS_CLI() {\n    if uname -a | grep \"x86_64 Msys\"; then\n        if [ ! \"$(command -v choco)\" ]; then\n            echo \"Chocolatey is required to uninstall AWS\"\n            exit 1\n        fi\n        choco uninstall awscli\n    else\n        AWS_CLI_PATH=$(command -v aws)\n        echo \"$AWS_CLI_PATH\"\n        if [ -n \"$AWS_CLI_PATH\" ]; then\n            EXISTING_AWS_VERSION=$(aws --version)\n            echo \"Uninstalling ${EXISTING_AWS_VERSION}\"\n            # shellcheck disable=SC2012\n            if [ -L \"$AWS_CLI_PATH\" ]; then\n                AWS_SYMLINK_PATH=$(ls -l \"$AWS_CLI_PATH\" | sed -e 's/.* -\u003e //')\n            fi\n            if uname -a | grep \"x86_64 Msys\"; then export SUDO=\"\"; fi\n            $SUDO rm -rf \"$AWS_CLI_PATH\" \"$AWS_SYMLINK_PATH\" \"$HOME/.aws/\" \"/usr/local/bin/aws\" \"/usr/local/bin/aws_completer\" \"/usr/local/aws-cli\"\n        else\n            echo \"No AWS install found\"\n        fi\n    fi\n}\n\nif [ ! \"$(command -v aws)\" ]; then\n    if [ \"$PARAM_AWS_CLI_VERSION\" = \"latest\" ]; then\n        Install_AWS_CLI\n    else\n        if uname -a | grep \"x86_64 Msys\"; then\n            Install_AWS_CLI \"${PARAM_AWS_CLI_VERSION}\"\n        else\n            Install_AWS_CLI \"-${PARAM_AWS_CLI_VERSION}\"\n        fi\n    fi\nelif [ \"$PARAM_AWS_CLI_OVERRIDE\" = 1 ]; then\n    Uninstall_AWS_CLI\n    if uname -a | grep \"x86_64 Msys\"; then\n        Install_AWS_CLI \"${PARAM_AWS_CLI_VERSION}\"\n    else\n        Install_AWS_CLI \"-${PARAM_AWS_CLI_VERSION}\"\n    fi\nelse\n    echo \"AWS CLI is already installed, skipping installation.\"\n    aws --version\nfi\n",
                    "background": false,
                    "insignificant": false,
                    "has_output": true,
                    "continue": null,
                    "end_time": "2024-03-06T19:51:59.043Z",
                    "exit_code": 0,
                    "run_time_millis": 3304,
                    "output_url": "https://circleci.com/api/private/output/presigned/26ca1ef5-a60b-4389-a500-4f8688251fd8/0/104?token=eyJhbGciOiJFUzI1NiIsImtpZCI6InRhc2tzLW91dHB1dC1qd3QtdjEiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDk3ODk4ODEsImlzcyI6ImNpcmNsZWNpLmNvbSIsInN1YiI6IjI2Y2ExZWY1LWE2MGItNDM4OS1hNTAwLTRmODY4ODI1MWZkOCJ9.ZkDOa7C7uNCmlvutn3IZUZJVtN3_6k3F6ODafOHxld3GH_-UARWIL7zjGNhjkfbtwld_gSzxBTVD_-lghuAM5w",
                    "status": "success",
                    "failed": null,
                    "infrastructure_fail": null,
                    "timedout": null,
                    "canceled": null
                }
            ]
        },
        {
            "name": "Configure AWS Access Key ID",
            "actions": [
                {
                    "index": 0,
                    "step": 105,
                    "allocation_id": "65e8c934cde7146e8d7e2c72-0-build/ABCDEFGH",
                    "name": "Configure AWS Access Key ID",
                    "type": "test",
                    "start_time": "2024-03-06T19:51:59.089Z",
                    "truncated": false,
                    "parallel": true,
                    "bash_command": "#!/bin/bash -eo pipefail\n#!/bin/sh\nif cat /etc/issue | grep \"Alpine\" \u003e/dev/null 2\u003e\u00261; then\n    . $BASH_ENV\nfi\n\nPARAM_AWS_CLI_ACCESS_KEY_ID=$(eval echo \"\\$$PARAM_AWS_CLI_ACCESS_KEY_ID\")\nPARAM_AWS_CLI_SECRET_ACCESS_KEY=$(eval echo \"\\$$PARAM_AWS_CLI_SECRET_ACCESS_KEY\")\nPARAM_AWS_CLI_REGION=$(eval echo \"\\$$PARAM_AWS_CLI_REGION\")\n\nif [ -z \"$PARAM_AWS_CLI_ACCESS_KEY_ID\" ] || [ -z \"${PARAM_AWS_CLI_SECRET_ACCESS_KEY}\" ]; then \n    echo \"Cannot configure profile. AWS access key id and AWS secret access key must be provided.\"\n    exit 1\nfi\n\naws configure set aws_access_key_id \\\n    \"$PARAM_AWS_CLI_ACCESS_KEY_ID\" \\\n    --profile \"$PARAM_AWS_CLI_PROFILE_NAME\"\n\naws configure set aws_secret_access_key \\\n    \"$PARAM_AWS_CLI_SECRET_ACCESS_KEY\" \\\n    --profile \"$PARAM_AWS_CLI_PROFILE_NAME\"\n\nif [ -n \"${AWS_SESSION_TOKEN}\" ]; then\n    aws configure set aws_session_token \\\n        \"${AWS_SESSION_TOKEN}\" \\\n        --profile \"$PARAM_AWS_CLI_PROFILE_NAME\"\nfi\n\nif [ \"$PARAM_AWS_CLI_CONFIG_DEFAULT_REGION\" = \"1\" ]; then\n    aws configure set default.region \"$PARAM_AWS_CLI_REGION\" \\\n        --profile \"$PARAM_AWS_CLI_PROFILE_NAME\"\nfi\n\nif [ \"$PARAM_AWS_CLI_CONFIG_PROFILE_REGION\" = \"1\" ]; then\n    aws configure set region \"$PARAM_AWS_CLI_REGION\" \\\n        --profile \"$PARAM_AWS_CLI_PROFILE_NAME\"\nfi\n",
                    "background": false,
                    "insignificant": false,
                    "has_output": true,
                    "continue": null,
                    "end_time": "2024-03-06T19:52:01.483Z",
                    "exit_code": 0,
                    "run_time_millis": 2394,
                    "output_url": "https://circleci.com/api/private/output/presigned/26ca1ef5-a60b-4389-a500-4f8688251fd8/0/105?token=eyJhbGciOiJFUzI1NiIsImtpZCI6InRhc2tzLW91dHB1dC1qd3QtdjEiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDk3ODk4ODEsImlzcyI6ImNpcmNsZWNpLmNvbSIsInN1YiI6IjI2Y2ExZWY1LWE2MGItNDM4OS1hNTAwLTRmODY4ODI1MWZkOCJ9.ZkDOa7C7uNCmlvutn3IZUZJVtN3_6k3F6ODafOHxld3GH_-UARWIL7zjGNhjkfbtwld_gSzxBTVD_-lghuAM5w",
                    "status": "success",
                    "failed": null,
                    "infrastructure_fail": null,
                    "timedout": null,
                    "canceled": null
                }
            ]
        },
        {
            "name": "Log into Amazon ECR with profile default",
            "actions": [
                {
                    "index": 0,
                    "step": 106,
                    "allocation_id": "65e8c934cde7146e8d7e2c72-0-build/ABCDEFGH",
                    "name": "Log into Amazon ECR with profile default",
                    "type": "test",
                    "start_time": "2024-03-06T19:52:01.522Z",
                    "truncated": false,
                    "parallel": true,
                    "bash_command": "#!/bin/bash -eo pipefail\n#!/bin/bash\nORB_EVAL_REGION=$(eval echo \"${ORB_EVAL_REGION}\")\nORB_VAL_ACCOUNT_URL=\"${!ORB_ENV_REGISTRY_ID}.dkr.ecr.${ORB_EVAL_REGION}.amazonaws.com\"\nECR_COMMAND=\"ecr\"\n\nif [ -z \"${!ORB_ENV_REGISTRY_ID}\" ]; then\n  echo \"The registry ID is not found. Please add the registry ID as an environment variable in CicleCI before continuing.\"\n  exit 1\nfi\n\nif [ \"$ORB_VAL_PUBLIC_REGISTRY\" == \"1\" ]; then\n    ORB_EVAL_REGION=\"us-east-1\"\n    ORB_VAL_ACCOUNT_URL=\"public.ecr.aws\"\n    ECR_COMMAND=\"ecr-public\"\nfi\n\nif [ -n \"${ORB_VAL_PROFILE_NAME}\" ]; then\n    set -- \"$@\" --profile \"${ORB_VAL_PROFILE_NAME}\"\nfi\n\n#Shellcheck disable=SC2002\nif [ -f \"$HOME/.docker/config.json\" ] \u0026\u0026 cat ~/.docker/config.json | grep \"${ORB_VAL_ACCOUNT_URL}\" \u003e /dev/null 2\u003e\u00261 ; then\n    echo \"Credential helper is already installed\"\nelse\n    aws \"${ECR_COMMAND}\" get-login-password --region \"${ORB_EVAL_REGION}\" \"$@\" | docker login --username AWS --password-stdin \"${ORB_VAL_ACCOUNT_URL}\"\nfi\n",
                    "background": false,
                    "insignificant": false,
                    "has_output": true,
                    "continue": null,
                    "end_time": "2024-03-06T19:52:03.015Z",
                    "exit_code": 0,
                    "run_time_millis": 1493,
                    "output_url": "https://circleci.com/api/private/output/presigned/26ca1ef5-a60b-4389-a500-4f8688251fd8/0/106?token=eyJhbGciOiJFUzI1NiIsImtpZCI6InRhc2tzLW91dHB1dC1qd3QtdjEiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDk3ODk4ODEsImlzcyI6ImNpcmNsZWNpLmNvbSIsInN1YiI6IjI2Y2ExZWY1LWE2MGItNDM4OS1hNTAwLTRmODY4ODI1MWZkOCJ9.ZkDOa7C7uNCmlvutn3IZUZJVtN3_6k3F6ODafOHxld3GH_-UARWIL7zjGNhjkfbtwld_gSzxBTVD_-lghuAM5w",
                    "status": "success",
                    "failed": null,
                    "infrastructure_fail": null,
                    "timedout": null,
                    "canceled": null
                }
            ]
        },
        {
            "name": "Build and Push Docker Image",
            "actions": [
                {
                    "index": 0,
                    "step": 107,
                    "allocation_id": "65e8c934cde7146e8d7e2c72-0-build/ABCDEFGH",
                    "name": "Build and Push Docker Image",
                    "type": "test",
                    "start_time": "2024-03-06T19:52:03.047Z",
                    "truncated": false,
                    "parallel": true,
                    "bash_command": "#!/bin/bash -eo pipefail\ndocker buildx build --ssh default \\\n  --progress=plain \\\n  --build-arg \"IMAGE_VERSION_ARG=${IMAGE_VERSION_ARG}\" \\\n  --platform linux/amd64 \\\n  --tag ${LATEST_TAG} \\\n  --tag ${VERSION_TAG} \\\n  --file ${DOCKERFILE_PATH} \\\n  --push .\n",
                    "background": false,
                    "insignificant": false,
                    "has_output": true,
                    "continue": null,
                    "end_time": "2024-03-06T19:52:14.971Z",
                    "exit_code": 0,
                    "run_time_millis": 11924,
                    "output_url": "https://circleci.com/api/private/output/presigned/26ca1ef5-a60b-4389-a500-4f8688251fd8/0/107?token=eyJhbGciOiJFUzI1NiIsImtpZCI6InRhc2tzLW91dHB1dC1qd3QtdjEiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDk3ODk4ODEsImlzcyI6ImNpcmNsZWNpLmNvbSIsInN1YiI6IjI2Y2ExZWY1LWE2MGItNDM4OS1hNTAwLTRmODY4ODI1MWZkOCJ9.ZkDOa7C7uNCmlvutn3IZUZJVtN3_6k3F6ODafOHxld3GH_-UARWIL7zjGNhjkfbtwld_gSzxBTVD_-lghuAM5w",
                    "status": "success",
                    "failed": null,
                    "infrastructure_fail": null,
                    "timedout": null,
                    "canceled": null
                }
            ]
        },
        {
            "name": "Setup environment variables",
            "actions": [
                {
                    "index": 0,
                    "step": 108,
                    "allocation_id": "65e8c934cde7146e8d7e2c72-0-build/ABCDEFGH",
                    "name": "Setup environment variables",
                    "type": "test",
                    "start_time": "2024-03-06T19:52:15.023Z",
                    "truncated": false,
                    "parallel": true,
                    "bash_command": "#!/bin/bash -eo pipefail\necho 'export SOURCE_IMAGE=\"${AWS_ECR_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/domain-services/store-data-hub-event-processor\"' \u003e\u003e \"$BASH_ENV\"\necho 'export TARGET_IMAGE=\"${CIRCLE_PROJECT_REPONAME}_eventprocessor_to_promote\"' \u003e\u003e \"$BASH_ENV\"\n",
                    "background": false,
                    "insignificant": false,
                    "has_output": true,
                    "continue": null,
                    "end_time": "2024-03-06T19:52:15.03Z",
                    "exit_code": 0,
                    "run_time_millis": 7,
                    "output_url": "https://circleci.com/api/private/output/presigned/26ca1ef5-a60b-4389-a500-4f8688251fd8/0/108?token=eyJhbGciOiJFUzI1NiIsImtpZCI6InRhc2tzLW91dHB1dC1qd3QtdjEiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDk3ODk4ODEsImlzcyI6ImNpcmNsZWNpLmNvbSIsInN1YiI6IjI2Y2ExZWY1LWE2MGItNDM4OS1hNTAwLTRmODY4ODI1MWZkOCJ9.ZkDOa7C7uNCmlvutn3IZUZJVtN3_6k3F6ODafOHxld3GH_-UARWIL7zjGNhjkfbtwld_gSzxBTVD_-lghuAM5w",
                    "status": "success",
                    "failed": null,
                    "infrastructure_fail": null,
                    "timedout": null,
                    "canceled": null
                }
            ]
        },
        {
            "name": "Save image to workspace",
            "actions": [
                {
                    "index": 0,
                    "step": 109,
                    "allocation_id": "65e8c934cde7146e8d7e2c72-0-build/ABCDEFGH",
                    "name": "Save image to workspace",
                    "type": "test",
                    "start_time": "2024-03-06T19:52:15.11Z",
                    "truncated": false,
                    "parallel": true,
                    "bash_command": "#!/bin/bash -eo pipefail\ndocker tag ${SOURCE_IMAGE}:${CIRCLE_SHA1:0:7} ${TARGET_IMAGE}:${CIRCLE_SHA1:0:7}\ndocker save -o ${TARGET_IMAGE}.tar ${TARGET_IMAGE}:${CIRCLE_SHA1:0:7}\n",
                    "background": false,
                    "insignificant": false,
                    "has_output": true,
                    "continue": null,
                    "end_time": "2024-03-06T19:52:17.977Z",
                    "exit_code": 0,
                    "run_time_millis": 2867,
                    "output_url": "https://circleci.com/api/private/output/presigned/26ca1ef5-a60b-4389-a500-4f8688251fd8/0/109?token=eyJhbGciOiJFUzI1NiIsImtpZCI6InRhc2tzLW91dHB1dC1qd3QtdjEiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDk3ODk4ODEsImlzcyI6ImNpcmNsZWNpLmNvbSIsInN1YiI6IjI2Y2ExZWY1LWE2MGItNDM4OS1hNTAwLTRmODY4ODI1MWZkOCJ9.ZkDOa7C7uNCmlvutn3IZUZJVtN3_6k3F6ODafOHxld3GH_-UARWIL7zjGNhjkfbtwld_gSzxBTVD_-lghuAM5w",
                    "status": "success",
                    "failed": null,
                    "infrastructure_fail": null,
                    "timedout": null,
                    "canceled": null
                }
            ]
        },
        {
            "name": "DLC Teardown",
            "actions": [
                {
                    "index": 0,
                    "step": 1022,
                    "allocation_id": "65e8c934cde7146e8d7e2c72-0-build/ABCDEFGH",
                    "name": "DLC Teardown",
                    "type": "test",
                    "start_time": "2024-03-06T19:52:20.662Z",
                    "truncated": false,
                    "parallel": true,
                    "bash_command": null,
                    "background": false,
                    "insignificant": false,
                    "has_output": true,
                    "continue": null,
                    "end_time": "2024-03-06T19:52:25.434Z",
                    "exit_code": null,
                    "run_time_millis": 4772,
                    "output_url": "https://circleci.com/api/private/output/presigned/26ca1ef5-a60b-4389-a500-4f8688251fd8/0/1022?token=eyJhbGciOiJFUzI1NiIsImtpZCI6InRhc2tzLW91dHB1dC1qd3QtdjEiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDk3ODk4ODEsImlzcyI6ImNpcmNsZWNpLmNvbSIsInN1YiI6IjI2Y2ExZWY1LWE2MGItNDM4OS1hNTAwLTRmODY4ODI1MWZkOCJ9.ZkDOa7C7uNCmlvutn3IZUZJVtN3_6k3F6ODafOHxld3GH_-UARWIL7zjGNhjkfbtwld_gSzxBTVD_-lghuAM5w",
                    "status": "success",
                    "failed": null,
                    "infrastructure_fail": null,
                    "timedout": null,
                    "canceled": null
                }
            ]
        }
    ],
    "stop_time": "2024-03-06T19:52:18.01Z",
    "subject": "Merge pull request #9 from Jackinthebox-IT/SPF2-1330",
    "timedout": false,
    "usage_queued_at": "2024-03-06T19:51:16.937Z",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/121970391?v=4",
        "id": 121970391,
        "is_user": true,
        "login": "vinhiller",
        "name": "Vinicius Hiller",
        "vcs_type": "github"
    },
    "username": "Jackinthebox-IT",
    "vcs_revision": "42cad44c9222813a0eb42367d4663d001316b77e",
    "vcs_tag": null,
    "vcs_type": "github",
    "vcs_url": "https://github.com/Jackinthebox-IT/pos-reporting-event-processor",
    "why": "github",
    "workflows": {
        "job_id": "26ca1ef5-a60b-4389-a500-4f8688251fd8",
        "job_name": "Build and Publish Pre-Prod",
        "upstream_concurrency_map": {
            "3b68aea0_4ee3_4ace_88a0_e8db6c16909d": [
                "616f3779-6bcc-493c-aa9f-a5b467b6ed26"
            ],
            "616f3779_6bcc_493c_aa9f_a5b467b6ed26": [
                "3b68aea0-4ee3-4ace-88a0-e8db6c16909d",
                "e901a5b2-09bc-4a5e-a7f9-facbbb566c4a",
                "9acd852c-44a0-4889-a0d2-68077f1d643b"
            ],
            "9acd852c_44a0_4889_a0d2_68077f1d643b": [
                "d5ddf1c5-9fee-42ef-a0bb-0cdd1a86c7f9",
                "616f3779-6bcc-493c-aa9f-a5b467b6ed26"
            ],
            "d5ddf1c5_9fee_42ef_a0bb_0cdd1a86c7f9": [
                "e901a5b2-09bc-4a5e-a7f9-facbbb566c4a",
                "9acd852c-44a0-4889-a0d2-68077f1d643b"
            ],
            "e901a5b2_09bc_4a5e_a7f9_facbbb566c4a": [
                "d5ddf1c5-9fee-42ef-a0bb-0cdd1a86c7f9",
                "616f3779-6bcc-493c-aa9f-a5b467b6ed26"
            ]
        },
        "upstream_job_ids": [
            "36b5ab8a-9c4c-401f-9e8a-684078f2b178",
            "a749c2e5-901f-4e4b-9866-fecc423a7909",
            "e901a5b2-09bc-4a5e-a7f9-facbbb566c4a",
            "9acd852c-44a0-4889-a0d2-68077f1d643b",
            "d5ddf1c5-9fee-42ef-a0bb-0cdd1a86c7f9",
            "3b68aea0-4ee3-4ace-88a0-e8db6c16909d",
            "616f3779-6bcc-493c-aa9f-a5b467b6ed26",
            "5382390d-2d8b-4252-b47b-2a3ab8763a64"
        ],
        "workflow_id": "b56d7f4d-596e-44b7-ab7b-15a1bb46d3f4",
        "workflow_name": "Main workflow",
        "workspace_id": "b56d7f4d-596e-44b7-ab7b-15a1bb46d3f4"
    }
}